// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_shared_enums.proto

#include "dota_shared_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_dota_5fshared_5fenums_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dota_5fshared_5fenums_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTASaveGame_Player;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dota_5fshared_5fenums_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CDOTASaveGame_SaveInstance_PlayerPositions;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_dota_5fshared_5fenums_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CDOTASaveGame_SaveInstance;
}  // namespace protobuf_dota_5fshared_5fenums_2eproto
class CDOTAClientHardwareSpecsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientHardwareSpecs>
      _instance;
} _CDOTAClientHardwareSpecs_default_instance_;
class CDOTASaveGame_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTASaveGame_Player>
      _instance;
} _CDOTASaveGame_Player_default_instance_;
class CDOTASaveGame_SaveInstance_PlayerPositionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTASaveGame_SaveInstance_PlayerPositions>
      _instance;
} _CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_;
class CDOTASaveGame_SaveInstanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTASaveGame_SaveInstance>
      _instance;
} _CDOTASaveGame_SaveInstance_default_instance_;
class CDOTASaveGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTASaveGame>
      _instance;
} _CDOTASaveGame_default_instance_;
class CMsgDOTACombatLogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACombatLogEntry>
      _instance;
} _CMsgDOTACombatLogEntry_default_instance_;
namespace protobuf_dota_5fshared_5fenums_2eproto {
static void InitDefaultsCDOTAClientHardwareSpecs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDOTAClientHardwareSpecs_default_instance_;
    new (ptr) ::CDOTAClientHardwareSpecs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDOTAClientHardwareSpecs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAClientHardwareSpecs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAClientHardwareSpecs}, {}};

static void InitDefaultsCDOTASaveGame_Player() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDOTASaveGame_Player_default_instance_;
    new (ptr) ::CDOTASaveGame_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDOTASaveGame_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTASaveGame_Player =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTASaveGame_Player}, {}};

static void InitDefaultsCDOTASaveGame_SaveInstance_PlayerPositions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_;
    new (ptr) ::CDOTASaveGame_SaveInstance_PlayerPositions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDOTASaveGame_SaveInstance_PlayerPositions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTASaveGame_SaveInstance_PlayerPositions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTASaveGame_SaveInstance_PlayerPositions}, {}};

static void InitDefaultsCDOTASaveGame_SaveInstance() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDOTASaveGame_SaveInstance_default_instance_;
    new (ptr) ::CDOTASaveGame_SaveInstance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDOTASaveGame_SaveInstance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTASaveGame_SaveInstance =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTASaveGame_SaveInstance}, {
      &protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame_SaveInstance_PlayerPositions.base,}};

static void InitDefaultsCDOTASaveGame() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CDOTASaveGame_default_instance_;
    new (ptr) ::CDOTASaveGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CDOTASaveGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CDOTASaveGame =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCDOTASaveGame}, {
      &protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame_Player.base,
      &protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame_SaveInstance.base,}};

static void InitDefaultsCMsgDOTACombatLogEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgDOTACombatLogEntry_default_instance_;
    new (ptr) ::CMsgDOTACombatLogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgDOTACombatLogEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTACombatLogEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTACombatLogEntry}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAClientHardwareSpecs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTASaveGame_Player.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTASaveGame_SaveInstance_PlayerPositions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTASaveGame_SaveInstance.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTASaveGame.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTACombatLogEntry.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[43];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTAClientHardwareSpecs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTAClientHardwareSpecs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTAClientHardwareSpecs, logical_processors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTAClientHardwareSpecs, cpu_cycles_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTAClientHardwareSpecs, total_physical_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTAClientHardwareSpecs, is_64_bit_os_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTAClientHardwareSpecs, upload_measurement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTAClientHardwareSpecs, prefer_not_host_),
  2,
  0,
  1,
  3,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_Player, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_Player, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_Player, hero_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance_PlayerPositions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance_PlayerPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance_PlayerPositions, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance_PlayerPositions, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance, team1_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance, team2_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance, player_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance, save_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame_SaveInstance, save_time_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame, save_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CDOTASaveGame, save_instances_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, target_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, target_source_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, attacker_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, damage_source_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, inflictor_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_attacker_illusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_attacker_hero_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_target_illusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_target_hero_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_visible_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_visible_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, stun_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, slow_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_ability_toggle_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_ability_toggle_off_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, ability_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, location_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, location_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, gold_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, timestamp_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, modifier_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, xp_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, attacker_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, target_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, obs_wards_placed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, assist_player0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, assist_player1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, assist_player2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, assist_player3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, stack_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, hidden_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_target_building_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, neutral_camp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, rune_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, assist_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_heal_save_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, is_ultimate_ability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, attacker_hero_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, target_hero_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, xpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, gpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, event_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, target_is_self_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, damage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, invisibility_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, damage_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, networth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, building_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, modifier_elapsed_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, silence_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, heal_from_lifesteal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, modifier_purged_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, spell_evaded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, motion_controller_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, long_range_kill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, modifier_purge_ability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, modifier_purge_npc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, root_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, total_unit_death_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, aura_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, armor_debuff_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, no_physical_damage_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, modifier_ability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, modifier_hidden_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, inflictor_is_stolen_ability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, kill_eater_event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgDOTACombatLogEntry, unit_status_label_),
  70,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  12,
  13,
  9,
  10,
  11,
  16,
  17,
  14,
  15,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  36,
  37,
  34,
  35,
  ~0u,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  48,
  45,
  49,
  46,
  47,
  52,
  53,
  50,
  51,
  54,
  55,
  56,
  57,
  58,
  59,
  61,
  60,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::CDOTAClientHardwareSpecs)},
  { 17, 25, sizeof(::CDOTASaveGame_Player)},
  { 28, 35, sizeof(::CDOTASaveGame_SaveInstance_PlayerPositions)},
  { 37, 48, sizeof(::CDOTASaveGame_SaveInstance)},
  { 54, 63, sizeof(::CDOTASaveGame)},
  { 67, 144, sizeof(::CMsgDOTACombatLogEntry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDOTAClientHardwareSpecs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDOTASaveGame_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDOTASaveGame_SaveInstance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CDOTASaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgDOTACombatLogEntry_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "dota_shared_enums.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\027dota_shared_enums.proto\"\277\001\n\030CDOTAClien"
      "tHardwareSpecs\022\032\n\022logical_processors\030\001 \001"
      "(\r\022\035\n\025cpu_cycles_per_second\030\002 \001(\006\022\035\n\025tot"
      "al_physical_memory\030\003 \001(\006\022\024\n\014is_64_bit_os"
      "\030\004 \001(\010\022\032\n\022upload_measurement\030\005 \001(\004\022\027\n\017pr"
      "efer_not_host\030\006 \001(\010\"\316\003\n\rCDOTASaveGame\022\020\n"
      "\010match_id\030\005 \001(\004\022\021\n\tsave_time\030\002 \001(\r\022&\n\007pl"
      "ayers\030\003 \003(\0132\025.CDOTASaveGame.Player\0223\n\016sa"
      "ve_instances\030\004 \003(\0132\033.CDOTASaveGame.SaveI"
      "nstance\032Y\n\006Player\0223\n\004team\030\001 \001(\0162\r.DOTA_G"
      "C_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\014\n\004name\030\002"
      " \001(\t\022\014\n\004hero\030\003 \001(\t\032\337\001\n\014SaveInstance\022\021\n\tg"
      "ame_time\030\002 \001(\r\022\023\n\013team1_score\030\003 \001(\r\022\023\n\013t"
      "eam2_score\030\004 \001(\r\022E\n\020player_positions\030\005 \003"
      "(\0132+.CDOTASaveGame.SaveInstance.PlayerPo"
      "sitions\022\017\n\007save_id\030\006 \001(\r\022\021\n\tsave_time\030\007 "
      "\001(\r\032\'\n\017PlayerPositions\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
      " \001(\002\"\275\016\n\026CMsgDOTACombatLogEntry\022;\n\004type\030"
      "\001 \001(\0162\025.DOTA_COMBATLOG_TYPES:\026DOTA_COMBA"
      "TLOG_INVALID\022\023\n\013target_name\030\002 \001(\r\022\032\n\022tar"
      "get_source_name\030\003 \001(\r\022\025\n\rattacker_name\030\004"
      " \001(\r\022\032\n\022damage_source_name\030\005 \001(\r\022\026\n\016infl"
      "ictor_name\030\006 \001(\r\022\034\n\024is_attacker_illusion"
      "\030\007 \001(\010\022\030\n\020is_attacker_hero\030\010 \001(\010\022\032\n\022is_t"
      "arget_illusion\030\t \001(\010\022\026\n\016is_target_hero\030\n"
      " \001(\010\022\032\n\022is_visible_radiant\030\013 \001(\010\022\027\n\017is_v"
      "isible_dire\030\014 \001(\010\022\r\n\005value\030\r \001(\r\022\016\n\006heal"
      "th\030\016 \001(\005\022\021\n\ttimestamp\030\017 \001(\002\022\025\n\rstun_dura"
      "tion\030\020 \001(\002\022\025\n\rslow_duration\030\021 \001(\002\022\034\n\024is_"
      "ability_toggle_on\030\022 \001(\010\022\035\n\025is_ability_to"
      "ggle_off\030\023 \001(\010\022\025\n\rability_level\030\024 \001(\r\022\022\n"
      "\nlocation_x\030\025 \001(\002\022\022\n\nlocation_y\030\026 \001(\002\022\023\n"
      "\013gold_reason\030\027 \001(\r\022\025\n\rtimestamp_raw\030\030 \001("
      "\002\022\031\n\021modifier_duration\030\031 \001(\002\022\021\n\txp_reaso"
      "n\030\032 \001(\r\022\021\n\tlast_hits\030\033 \001(\r\022\025\n\rattacker_t"
      "eam\030\034 \001(\r\022\023\n\013target_team\030\035 \001(\r\022\030\n\020obs_wa"
      "rds_placed\030\036 \001(\r\022\026\n\016assist_player0\030\037 \001(\r"
      "\022\026\n\016assist_player1\030  \001(\r\022\026\n\016assist_playe"
      "r2\030! \001(\r\022\026\n\016assist_player3\030\" \001(\r\022\023\n\013stac"
      "k_count\030# \001(\r\022\027\n\017hidden_modifier\030$ \001(\010\022\032"
      "\n\022is_target_building\030% \001(\010\022\031\n\021neutral_ca"
      "mp_type\030& \001(\r\022\021\n\trune_type\030\' \001(\r\022\026\n\016assi"
      "st_players\030( \003(\r\022\024\n\014is_heal_save\030) \001(\010\022\033"
      "\n\023is_ultimate_ability\030* \001(\010\022\033\n\023attacker_"
      "hero_level\030+ \001(\r\022\031\n\021target_hero_level\030, "
      "\001(\r\022\013\n\003xpm\030- \001(\r\022\013\n\003gpm\030. \001(\r\022\026\n\016event_l"
      "ocation\030/ \001(\r\022\026\n\016target_is_self\0300 \001(\010\022\023\n"
      "\013damage_type\0301 \001(\r\022\035\n\025invisibility_modif"
      "ier\0302 \001(\010\022\027\n\017damage_category\0303 \001(\r\022\020\n\010ne"
      "tworth\0304 \001(\r\022\025\n\rbuilding_type\0305 \001(\r\022!\n\031m"
      "odifier_elapsed_duration\0306 \001(\002\022\030\n\020silenc"
      "e_modifier\0307 \001(\010\022\033\n\023heal_from_lifesteal\030"
      "8 \001(\010\022\027\n\017modifier_purged\0309 \001(\010\022\024\n\014spell_"
      "evaded\030: \001(\010\022\"\n\032motion_controller_modifi"
      "er\030; \001(\010\022\027\n\017long_range_kill\030< \001(\010\022\036\n\026mod"
      "ifier_purge_ability\030= \001(\r\022\032\n\022modifier_pu"
      "rge_npc\030> \001(\r\022\025\n\rroot_modifier\030\? \001(\010\022\036\n\026"
      "total_unit_death_count\030@ \001(\r\022\025\n\raura_mod"
      "ifier\030A \001(\010\022\035\n\025armor_debuff_modifier\030B \001"
      "(\010\022#\n\033no_physical_damage_modifier\030C \001(\010\022"
      "\030\n\020modifier_ability\030D \001(\r\022\027\n\017modifier_hi"
      "dden\030E \001(\010\022#\n\033inflictor_is_stolen_abilit"
      "y\030F \001(\010\022\030\n\020kill_eater_event\030G \001(\r\022\031\n\021uni"
      "t_status_label\030H \001(\r*\365\004\n\rDOTA_GameMode\022\026"
      "\n\022DOTA_GAMEMODE_NONE\020\000\022\024\n\020DOTA_GAMEMODE_"
      "AP\020\001\022\024\n\020DOTA_GAMEMODE_CM\020\002\022\024\n\020DOTA_GAMEM"
      "ODE_RD\020\003\022\024\n\020DOTA_GAMEMODE_SD\020\004\022\024\n\020DOTA_G"
      "AMEMODE_AR\020\005\022\027\n\023DOTA_GAMEMODE_INTRO\020\006\022\024\n"
      "\020DOTA_GAMEMODE_HW\020\007\022\034\n\030DOTA_GAMEMODE_REV"
      "ERSE_CM\020\010\022\026\n\022DOTA_GAMEMODE_XMAS\020\t\022\032\n\026DOT"
      "A_GAMEMODE_TUTORIAL\020\n\022\024\n\020DOTA_GAMEMODE_M"
      "O\020\013\022\024\n\020DOTA_GAMEMODE_LP\020\014\022\027\n\023DOTA_GAMEMO"
      "DE_POOL1\020\r\022\024\n\020DOTA_GAMEMODE_FH\020\016\022\030\n\024DOTA"
      "_GAMEMODE_CUSTOM\020\017\022\024\n\020DOTA_GAMEMODE_CD\020\020"
      "\022\024\n\020DOTA_GAMEMODE_BD\020\021\022\037\n\033DOTA_GAMEMODE_"
      "ABILITY_DRAFT\020\022\022\027\n\023DOTA_GAMEMODE_EVENT\020\023"
      "\022\026\n\022DOTA_GAMEMODE_ARDM\020\024\022\030\n\024DOTA_GAMEMOD"
      "E_1V1MID\020\025\022\033\n\027DOTA_GAMEMODE_ALL_DRAFT\020\026\022"
      "\027\n\023DOTA_GAMEMODE_TURBO\020\027\022\032\n\026DOTA_GAMEMOD"
      "E_MUTATION\020\030*\354\003\n\016DOTA_GameState\022\035\n\031DOTA_"
      "GAMERULES_STATE_INIT\020\000\0221\n-DOTA_GAMERULES"
      "_STATE_WAIT_FOR_PLAYERS_TO_LOAD\020\001\022\'\n#DOT"
      "A_GAMERULES_STATE_HERO_SELECTION\020\002\022&\n\"DO"
      "TA_GAMERULES_STATE_STRATEGY_TIME\020\003\022!\n\035DO"
      "TA_GAMERULES_STATE_PRE_GAME\020\004\022)\n%DOTA_GA"
      "MERULES_STATE_GAME_IN_PROGRESS\020\005\022\"\n\036DOTA"
      "_GAMERULES_STATE_POST_GAME\020\006\022#\n\037DOTA_GAM"
      "ERULES_STATE_DISCONNECT\020\007\022&\n\"DOTA_GAMERU"
      "LES_STATE_TEAM_SHOWCASE\020\010\022*\n&DOTA_GAMERU"
      "LES_STATE_CUSTOM_GAME_SETUP\020\t\022-\n)DOTA_GA"
      "MERULES_STATE_WAIT_FOR_MAP_TO_LOAD\020\n\022\035\n\031"
      "DOTA_GAMERULES_STATE_LAST\020\013*\266\001\n\014DOTA_GC_"
      "TEAM\022\032\n\026DOTA_GC_TEAM_GOOD_GUYS\020\000\022\031\n\025DOTA"
      "_GC_TEAM_BAD_GUYS\020\001\022\034\n\030DOTA_GC_TEAM_BROA"
      "DCASTER\020\002\022\032\n\026DOTA_GC_TEAM_SPECTATOR\020\003\022\034\n"
      "\030DOTA_GC_TEAM_PLAYER_POOL\020\004\022\027\n\023DOTA_GC_T"
      "EAM_NOTEAM\020\005*\341\005\n\006EEvent\022\021\n\rEVENT_ID_NONE"
      "\020\000\022\025\n\021EVENT_ID_DIRETIDE\020\001\022\034\n\030EVENT_ID_SP"
      "RING_FESTIVAL\020\002\022\033\n\027EVENT_ID_FROSTIVUS_20"
      "13\020\003\022\034\n\030EVENT_ID_COMPENDIUM_2014\020\004\022\032\n\026EV"
      "ENT_ID_PWRD_DAC_2015\020\006\022\033\n\027EVENT_ID_NEW_B"
      "LOOM_2015\020\007\022\037\n\033EVENT_ID_INTERNATIONAL_20"
      "15\020\010\022\034\n\030EVENT_ID_FALL_MAJOR_2015\020\t\022\026\n\022EV"
      "ENT_ID_ORACLE_PA\020\n\022$\n EVENT_ID_NEW_BLOOM"
      "_2015_PREBEAST\020\013\022\026\n\022EVENT_ID_FROSTIVUS\020\014"
      "\022\036\n\032EVENT_ID_WINTER_MAJOR_2016\020\r\022\037\n\033EVEN"
      "T_ID_INTERNATIONAL_2016\020\016\022\034\n\030EVENT_ID_FA"
      "LL_MAJOR_2016\020\017\022\036\n\032EVENT_ID_WINTER_MAJOR"
      "_2017\020\020\022\033\n\027EVENT_ID_NEW_BLOOM_2017\020\021\022\037\n\033"
      "EVENT_ID_INTERNATIONAL_2017\020\022\022\036\n\032EVENT_I"
      "D_PLUS_SUBSCRIPTION\020\023\022\035\n\031EVENT_ID_SINGLE"
      "S_DAY_2017\020\024\022\033\n\027EVENT_ID_FROSTIVUS_2017\020"
      "\025\022\037\n\033EVENT_ID_INTERNATIONAL_2018\020\026\022\033\n\027EV"
      "ENT_ID_FROSTIVUS_2018\020\027\022\033\n\027EVENT_ID_NEW_"
      "BLOOM_2019\020\030\022\022\n\016EVENT_ID_COUNT\020\031*\250\002\n\022DOT"
      "ALeaverStatus_t\022\024\n\020DOTA_LEAVER_NONE\020\000\022\034\n"
      "\030DOTA_LEAVER_DISCONNECTED\020\001\022%\n!DOTA_LEAV"
      "ER_DISCONNECTED_TOO_LONG\020\002\022\031\n\025DOTA_LEAVE"
      "R_ABANDONED\020\003\022\023\n\017DOTA_LEAVER_AFK\020\004\022\037\n\033DO"
      "TA_LEAVER_NEVER_CONNECTED\020\005\022(\n$DOTA_LEAV"
      "ER_NEVER_CONNECTED_TOO_LONG\020\006\022\"\n\036DOTA_LE"
      "AVER_FAILED_TO_READY_UP\020\007\022\030\n\024DOTA_LEAVER"
      "_DECLINED\020\010*\236\002\n\025DOTAConnectionState_t\022!\n"
      "\035DOTA_CONNECTION_STATE_UNKNOWN\020\000\022+\n\'DOTA"
      "_CONNECTION_STATE_NOT_YET_CONNECTED\020\001\022#\n"
      "\037DOTA_CONNECTION_STATE_CONNECTED\020\002\022&\n\"DO"
      "TA_CONNECTION_STATE_DISCONNECTED\020\003\022#\n\037DO"
      "TA_CONNECTION_STATE_ABANDONED\020\004\022!\n\035DOTA_"
      "CONNECTION_STATE_LOADING\020\005\022 \n\034DOTA_CONNE"
      "CTION_STATE_FAILED\020\006*\214\001\n\rFantasy_Roles\022\032"
      "\n\026FANTASY_ROLE_UNDEFINED\020\000\022\025\n\021FANTASY_RO"
      "LE_CORE\020\001\022\030\n\024FANTASY_ROLE_SUPPORT\020\002\022\030\n\024F"
      "ANTASY_ROLE_OFFLANE\020\003\022\024\n\020FANTASY_ROLE_MI"
      "D\020\004*\212\001\n\022Fantasy_Team_Slots\022\025\n\021FANTASY_SL"
      "OT_NONE\020\000\022\025\n\021FANTASY_SLOT_CORE\020\001\022\030\n\024FANT"
      "ASY_SLOT_SUPPORT\020\002\022\024\n\020FANTASY_SLOT_ANY\020\003"
      "\022\026\n\022FANTASY_SLOT_BENCH\020\004*\335\002\n\026Fantasy_Sel"
      "ection_Mode\022\035\n\031FANTASY_SELECTION_INVALID"
      "\020\000\022\034\n\030FANTASY_SELECTION_LOCKED\020\001\022\035\n\031FANT"
      "ASY_SELECTION_SHUFFLE\020\002\022\037\n\033FANTASY_SELEC"
      "TION_FREE_PICK\020\003\022\033\n\027FANTASY_SELECTION_EN"
      "DED\020\004\022 \n\034FANTASY_SELECTION_PRE_SEASON\020\005\022"
      "\037\n\033FANTASY_SELECTION_PRE_DRAFT\020\006\022\036\n\032FANT"
      "ASY_SELECTION_DRAFTING\020\007\022$\n FANTASY_SELE"
      "CTION_REGULAR_SEASON\020\010\022 \n\034FANTASY_SELECT"
      "ION_CARD_BASED\020\t*\234\005\n\025DOTAChatChannelType"
      "_t\022\034\n\030DOTAChannelType_Regional\020\000\022\032\n\026DOTA"
      "ChannelType_Custom\020\001\022\031\n\025DOTAChannelType_"
      "Party\020\002\022\031\n\025DOTAChannelType_Lobby\020\003\022\030\n\024DO"
      "TAChannelType_Team\020\004\022\031\n\025DOTAChannelType_"
      "Guild\020\005\022\033\n\027DOTAChannelType_Fantasy\020\006\022\033\n\027"
      "DOTAChannelType_Whisper\020\007\022\033\n\027DOTAChannel"
      "Type_Console\020\010\022\027\n\023DOTAChannelType_Tab\020\t\022"
      "\033\n\027DOTAChannelType_Invalid\020\n\022\033\n\027DOTAChan"
      "nelType_GameAll\020\013\022\036\n\032DOTAChannelType_Gam"
      "eAllies\020\014\022!\n\035DOTAChannelType_GameSpectat"
      "or\020\r\022\030\n\024DOTAChannelType_Cafe\020\017\022\036\n\032DOTACh"
      "annelType_CustomGame\020\020\022\033\n\027DOTAChannelTyp"
      "e_Private\020\021\022\034\n\030DOTAChannelType_PostGame\020"
      "\022\022\035\n\031DOTAChannelType_BattleCup\020\023\022!\n\035DOTA"
      "ChannelType_HLTVSpectator\020\024\022\036\n\032DOTAChann"
      "elType_GameEvents\020\025\022\032\n\026DOTAChannelType_T"
      "rivia\020\026*\204\002\n\024EProfileCardSlotType\022 \n\034k_EP"
      "rofileCardSlotType_Empty\020\000\022\037\n\033k_EProfile"
      "CardSlotType_Stat\020\001\022!\n\035k_EProfileCardSlo"
      "tType_Trophy\020\002\022\037\n\033k_EProfileCardSlotType"
      "_Item\020\003\022\037\n\033k_EProfileCardSlotType_Hero\020\004"
      "\022#\n\037k_EProfileCardSlotType_Emoticon\020\005\022\037\n"
      "\033k_EProfileCardSlotType_Team\020\006*\225\001\n\027EMatc"
      "hGroupServerStatus\022 \n\034k_EMatchGroupServe"
      "rStatus_OK\020\000\0221\n-k_EMatchGroupServerStatu"
      "s_LimitedAvailability\020\001\022%\n!k_EMatchGroup"
      "ServerStatus_Offline\020\002*O\n\014DOTA_CM_PICK\022\022"
      "\n\016DOTA_CM_RANDOM\020\000\022\025\n\021DOTA_CM_GOOD_GUYS\020"
      "\001\022\024\n\020DOTA_CM_BAD_GUYS\020\002*\213\001\n\026DOTALowPrior"
      "ityBanType\022!\n\035DOTA_LOW_PRIORITY_BAN_ABAN"
      "DON\020\000\022!\n\035DOTA_LOW_PRIORITY_BAN_REPORTS\020\001"
      "\022+\n\'DOTA_LOW_PRIORITY_BAN_SECONDARY_ABAN"
      "DON\020\002*}\n\023DOTALobbyReadyState\022\"\n\036DOTALobb"
      "yReadyState_UNDECLARED\020\000\022 \n\034DOTALobbyRea"
      "dyState_ACCEPTED\020\001\022 \n\034DOTALobbyReadyStat"
      "e_DECLINED\020\002*D\n\017DOTAGameVersion\022\030\n\024GAME_"
      "VERSION_CURRENT\020\000\022\027\n\023GAME_VERSION_STABLE"
      "\020\001*\375\003\n\023DOTAJoinLobbyResult\022\034\n\030DOTA_JOIN_"
      "RESULT_SUCCESS\020\000\022$\n DOTA_JOIN_RESULT_ALR"
      "EADY_IN_GAME\020\001\022\"\n\036DOTA_JOIN_RESULT_INVAL"
      "ID_LOBBY\020\002\022\'\n#DOTA_JOIN_RESULT_INCORRECT"
      "_PASSWORD\020\003\022\"\n\036DOTA_JOIN_RESULT_ACCESS_D"
      "ENIED\020\004\022\"\n\036DOTA_JOIN_RESULT_GENERIC_ERRO"
      "R\020\005\022&\n\"DOTA_JOIN_RESULT_INCORRECT_VERSIO"
      "N\020\006\022\"\n\036DOTA_JOIN_RESULT_IN_TEAM_PARTY\020\007\022"
      "#\n\037DOTA_JOIN_RESULT_NO_LOBBY_FOUND\020\010\022\037\n\033"
      "DOTA_JOIN_RESULT_LOBBY_FULL\020\t\0222\n.DOTA_JO"
      "IN_RESULT_CUSTOM_GAME_INCORRECT_VERSION\020"
      "\n\022\034\n\030DOTA_JOIN_RESULT_TIMEOUT\020\013\022)\n%DOTA_"
      "JOIN_RESULT_CUSTOM_GAME_COOLDOWN\020\014*q\n\032DO"
      "TASelectionPriorityRules\022\'\n#k_DOTASelect"
      "ionPriorityRules_Manual\020\000\022*\n&k_DOTASelec"
      "tionPriorityRules_Automatic\020\001*\366\001\n\033DOTASe"
      "lectionPriorityChoice\022)\n%k_DOTASelection"
      "PriorityChoice_Invalid\020\000\022+\n\'k_DOTASelect"
      "ionPriorityChoice_FirstPick\020\001\022,\n(k_DOTAS"
      "electionPriorityChoice_SecondPick\020\002\022)\n%k"
      "_DOTASelectionPriorityChoice_Radiant\020\003\022&"
      "\n\"k_DOTASelectionPriorityChoice_Dire\020\004*b"
      "\n\rDOTAMatchVote\022\031\n\025DOTAMatchVote_INVALID"
      "\020\000\022\032\n\026DOTAMatchVote_POSITIVE\020\001\022\032\n\026DOTAMa"
      "tchVote_NEGATIVE\020\002*\203\002\n\027DOTA_LobbyMemberX"
      "PBonus\022#\n\037DOTA_LobbyMemberXPBonus_DEFAUL"
      "T\020\000\022*\n&DOTA_LobbyMemberXPBonus_BATTLE_BO"
      "OSTER\020\001\022\'\n#DOTA_LobbyMemberXPBonus_SHARE"
      "_BONUS\020\002\022!\n\035DOTA_LobbyMemberXPBonus_PART"
      "Y\020\003\022\'\n#DOTA_LobbyMemberXPBonus_RECRUITME"
      "NT\020\004\022\"\n\036DOTA_LobbyMemberXPBonus_PCBANG\020\005"
      "*x\n\023DOTALobbyVisibility\022\036\n\032DOTALobbyVisi"
      "bility_Public\020\000\022\037\n\033DOTALobbyVisibility_F"
      "riends\020\001\022 \n\034DOTALobbyVisibility_Unlisted"
      "\020\002*\302\002\n\022EDOTAPlayerMMRType\022 \n\034k_EDOTAPlay"
      "erMMRType_Invalid\020\000\022&\n\"k_EDOTAPlayerMMRT"
      "ype_GeneralHidden\020\001\022+\n\'k_EDOTAPlayerMMRT"
      "ype_GeneralCompetitive\020\003\022(\n$k_EDOTAPlaye"
      "rMMRType_SoloCompetitive\020\004\022.\n*k_EDOTAPla"
      "yerMMRType_1v1Competitive_UNUSED\020\005\022.\n*k_"
      "EDOTAPlayerMMRType_GeneralSeasonalRanked"
      "\020\006\022+\n\'k_EDOTAPlayerMMRType_SoloSeasonalR"
      "anked\020\007*\336\002\n\tMatchType\022\025\n\021MATCH_TYPE_CASU"
      "AL\020\000\022\030\n\024MATCH_TYPE_COOP_BOTS\020\001\022\032\n\026MATCH_"
      "TYPE_TEAM_RANKED\020\002\022 \n\034MATCH_TYPE_LEGACY_"
      "SOLO_QUEUE\020\003\022\032\n\026MATCH_TYPE_COMPETITIVE\020\004"
      "\022\036\n\032MATCH_TYPE_WEEKEND_TOURNEY\020\005\022\031\n\025MATC"
      "H_TYPE_CASUAL_1V1\020\006\022\024\n\020MATCH_TYPE_EVENT\020"
      "\007\022\036\n\032MATCH_TYPE_SEASONAL_RANKED\020\010\022 \n\034MAT"
      "CH_TYPE_LOWPRI_DEPRECATED\020\t\022\032\n\026MATCH_TYP"
      "E_STEAM_GROUP\020\n\022\027\n\023MATCH_TYPE_MUTATION\020\013"
      "*\204\002\n\021DOTABotDifficulty\022\032\n\026BOT_DIFFICULTY"
      "_PASSIVE\020\000\022\027\n\023BOT_DIFFICULTY_EASY\020\001\022\031\n\025B"
      "OT_DIFFICULTY_MEDIUM\020\002\022\027\n\023BOT_DIFFICULTY"
      "_HARD\020\003\022\031\n\025BOT_DIFFICULTY_UNFAIR\020\004\022\032\n\026BO"
      "T_DIFFICULTY_INVALID\020\005\022\031\n\025BOT_DIFFICULTY"
      "_EXTRA1\020\006\022\031\n\025BOT_DIFFICULTY_EXTRA2\020\007\022\031\n\025"
      "BOT_DIFFICULTY_EXTRA3\020\010*\223\006\n\rDOTA_BOT_MOD"
      "E\022\026\n\022DOTA_BOT_MODE_NONE\020\000\022\030\n\024DOTA_BOT_MO"
      "DE_LANING\020\001\022\030\n\024DOTA_BOT_MODE_ATTACK\020\002\022\026\n"
      "\022DOTA_BOT_MODE_ROAM\020\003\022\031\n\025DOTA_BOT_MODE_R"
      "ETREAT\020\004\022\035\n\031DOTA_BOT_MODE_SECRET_SHOP\020\005\022"
      "\033\n\027DOTA_BOT_MODE_SIDE_SHOP\020\006\022\026\n\022DOTA_BOT"
      "_MODE_RUNE\020\007\022 \n\034DOTA_BOT_MODE_PUSH_TOWER"
      "_TOP\020\010\022 \n\034DOTA_BOT_MODE_PUSH_TOWER_MID\020\t"
      "\022 \n\034DOTA_BOT_MODE_PUSH_TOWER_BOT\020\n\022\"\n\036DO"
      "TA_BOT_MODE_DEFEND_TOWER_TOP\020\013\022\"\n\036DOTA_B"
      "OT_MODE_DEFEND_TOWER_MID\020\014\022\"\n\036DOTA_BOT_M"
      "ODE_DEFEND_TOWER_BOT\020\r\022\032\n\026DOTA_BOT_MODE_"
      "ASSEMBLE\020\016\022&\n\"DOTA_BOT_MODE_ASSEMBLE_WIT"
      "H_HUMANS\020\017\022\033\n\027DOTA_BOT_MODE_TEAM_ROAM\020\020\022"
      "\026\n\022DOTA_BOT_MODE_FARM\020\021\022\035\n\031DOTA_BOT_MODE"
      "_DEFEND_ALLY\020\022\022#\n\037DOTA_BOT_MODE_EVASIVE_"
      "MANEUVERS\020\023\022\030\n\024DOTA_BOT_MODE_ROSHAN\020\024\022\026\n"
      "\022DOTA_BOT_MODE_ITEM\020\025\022\026\n\022DOTA_BOT_MODE_W"
      "ARD\020\026\022\033\n\027DOTA_BOT_MODE_COMPANION\020\027\022\037\n\033DO"
      "TA_BOT_MODE_TUTORIAL_BOSS\020\030\022\030\n\024DOTA_BOT_"
      "MODE_MINION\020\031*\363\001\n\016MatchLanguages\022\032\n\026MATC"
      "H_LANGUAGE_INVALID\020\000\022\032\n\026MATCH_LANGUAGE_E"
      "NGLISH\020\001\022\032\n\026MATCH_LANGUAGE_RUSSIAN\020\002\022\032\n\026"
      "MATCH_LANGUAGE_CHINESE\020\003\022\031\n\025MATCH_LANGUA"
      "GE_KOREAN\020\004\022\032\n\026MATCH_LANGUAGE_SPANISH\020\005\022"
      "\035\n\031MATCH_LANGUAGE_PORTUGUESE\020\006\022\033\n\027MATCH_"
      "LANGUAGE_ENGLISH2\020\007*\330\002\n\032ETourneyQueueDea"
      "dlineState\022\'\n#k_ETourneyQueueDeadlineSta"
      "te_Normal\020\000\022\'\n#k_ETourneyQueueDeadlineSt"
      "ate_Missed\020\001\022*\n&k_ETourneyQueueDeadlineS"
      "tate_ExpiredOK\020\002\022+\n\'k_ETourneyQueueDeadl"
      "ineState_SeekingBye\020\003\0222\n.k_ETourneyQueue"
      "DeadlineState_EligibleForRefund\020\004\022,\n\037k_E"
      "TourneyQueueDeadlineState_NA\020\377\377\377\377\377\377\377\377\377\001\022"
      "-\n)k_ETourneyQueueDeadlineState_Expiring"
      "Soon\020e*\307\002\n\rEMatchOutcome\022\033\n\027k_EMatchOutc"
      "ome_Unknown\020\000\022\036\n\032k_EMatchOutcome_RadVict"
      "ory\020\002\022\037\n\033k_EMatchOutcome_DireVictory\020\003\0223"
      "\n/k_EMatchOutcome_NotScored_PoorNetworkC"
      "onditions\020@\022$\n k_EMatchOutcome_NotScored"
      "_Leaver\020A\022)\n%k_EMatchOutcome_NotScored_S"
      "erverCrash\020B\022*\n&k_EMatchOutcome_NotScore"
      "d_NeverStarted\020C\022&\n\"k_EMatchOutcome_NotS"
      "cored_Canceled\020D*\206\001\n\tELaneType\022\025\n\021LANE_T"
      "YPE_UNKNOWN\020\000\022\022\n\016LANE_TYPE_SAFE\020\001\022\021\n\rLAN"
      "E_TYPE_OFF\020\002\022\021\n\rLANE_TYPE_MID\020\003\022\024\n\020LANE_"
      "TYPE_JUNGLE\020\004\022\022\n\016LANE_TYPE_ROAM\020\005*\300\001\n\nEB"
      "adgeType\022\034\n\030k_EBadgeType_TI7_Midweek\020\001\022\033"
      "\n\027k_EBadgeType_TI7_Finals\020\002\022\035\n\031k_EBadgeT"
      "ype_TI7_AllEvent\020\003\022\034\n\030k_EBadgeType_TI8_M"
      "idweek\020\004\022\033\n\027k_EBadgeType_TI8_Finals\020\005\022\035\n"
      "\031k_EBadgeType_TI8_AllEvent\020\006*\324\001\n\rELeague"
      "Status\022\027\n\023LEAGUE_STATUS_UNSET\020\000\022\035\n\031LEAGU"
      "E_STATUS_UNSUBMITTED\020\001\022\033\n\027LEAGUE_STATUS_"
      "SUBMITTED\020\002\022\032\n\026LEAGUE_STATUS_ACCEPTED\020\003\022"
      "\032\n\026LEAGUE_STATUS_REJECTED\020\004\022\033\n\027LEAGUE_ST"
      "ATUS_CONCLUDED\020\005\022\031\n\025LEAGUE_STATUS_DELETE"
      "D\020\006*\265\001\n\rELeagueRegion\022\027\n\023LEAGUE_REGION_U"
      "NSET\020\000\022\024\n\020LEAGUE_REGION_NA\020\001\022\024\n\020LEAGUE_R"
      "EGION_SA\020\002\022\030\n\024LEAGUE_REGION_EUROPE\020\003\022\025\n\021"
      "LEAGUE_REGION_CIS\020\004\022\027\n\023LEAGUE_REGION_CHI"
      "NA\020\005\022\025\n\021LEAGUE_REGION_SEA\020\006*\250\001\n\013ELeagueT"
      "ier\022\025\n\021LEAGUE_TIER_UNSET\020\000\022\027\n\023LEAGUE_TIE"
      "R_AMATEUR\020\001\022\034\n\030LEAGUE_TIER_PROFESSIONAL\020"
      "\002\022\025\n\021LEAGUE_TIER_MINOR\020\003\022\025\n\021LEAGUE_TIER_"
      "MAJOR\020\004\022\035\n\031LEAGUE_TIER_INTERNATIONAL\020\005*|"
      "\n\023ELeagueTierCategory\022 \n\034LEAGUE_TIER_CAT"
      "EGORY_AMATEUR\020\001\022%\n!LEAGUE_TIER_CATEGORY_"
      "PROFESSIONAL\020\002\022\034\n\030LEAGUE_TIER_CATEGORY_D"
      "PC\020\003*\240\001\n\014ELeagueFlags\022\025\n\021LEAGUE_FLAGS_NO"
      "NE\020\000\022\035\n\031LEAGUE_ACCEPTED_AGREEMENT\020\001\022\035\n\031L"
      "EAGUE_PAYMENT_EMAIL_SENT\020\002\022\035\n\031LEAGUE_COM"
      "PENDIUM_ALLOWED\020\004\022\034\n\030LEAGUE_COMPENDIUM_P"
      "UBLIC\020\010*\253\001\n\030ELeagueBroadcastProvider\022\034\n\030"
      "LEAGUE_BROADCAST_UNKNOWN\020\000\022\032\n\026LEAGUE_BRO"
      "ADCAST_STEAM\020\001\022\033\n\027LEAGUE_BROADCAST_TWITC"
      "H\020\002\022\034\n\030LEAGUE_BROADCAST_YOUTUBE\020\003\022\032\n\026LEA"
      "GUE_BROADCAST_OTHER\020d*\206\001\n\014ELeaguePhase\022\026"
      "\n\022LEAGUE_PHASE_UNSET\020\000\022#\n\037LEAGUE_PHASE_R"
      "EGIONAL_QUALIFIER\020\001\022\034\n\030LEAGUE_PHASE_GROU"
      "P_STAGE\020\002\022\033\n\027LEAGUE_PHASE_MAIN_EVENT\020\003*\307"
      "\002\n\023ELeagueFantasyPhase\022\036\n\032LEAGUE_FANTASY"
      "_PHASE_UNSET\020\000\022\035\n\031LEAGUE_FANTASY_PHASE_M"
      "AIN\020\001\022%\n!LEAGUE_FANTASY_PHASE_QUALIFIER_"
      "NA\020\002\022%\n!LEAGUE_FANTASY_PHASE_QUALIFIER_S"
      "A\020\003\022)\n%LEAGUE_FANTASY_PHASE_QUALIFIER_EU"
      "ROPE\020\004\022&\n\"LEAGUE_FANTASY_PHASE_QUALIFIER"
      "_CIS\020\005\022(\n$LEAGUE_FANTASY_PHASE_QUALIFIER"
      "_CHINA\020\006\022&\n\"LEAGUE_FANTASY_PHASE_QUALIFI"
      "ER_SEA\020\007*\273\r\n\022ELeagueAuditAction\022\037\n\033LEAGU"
      "E_AUDIT_ACTION_INVALID\020\000\022%\n!LEAGUE_AUDIT"
      "_ACTION_LEAGUE_CREATE\020\001\022#\n\037LEAGUE_AUDIT_"
      "ACTION_LEAGUE_EDIT\020\002\022%\n!LEAGUE_AUDIT_ACT"
      "ION_LEAGUE_DELETE\020\003\022(\n$LEAGUE_AUDIT_ACTI"
      "ON_LEAGUE_ADMIN_ADD\020\004\022+\n\'LEAGUE_AUDIT_AC"
      "TION_LEAGUE_ADMIN_REVOKE\020\005\022,\n(LEAGUE_AUD"
      "IT_ACTION_LEAGUE_ADMIN_PROMOTE\020\006\022)\n%LEAG"
      "UE_AUDIT_ACTION_LEAGUE_STREAM_ADD\020\007\022,\n(L"
      "EAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE\020"
      "\010\022,\n(LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UP"
      "DATED\020\t\022,\n(LEAGUE_AUDIT_ACTION_LEAGUE_ME"
      "SSAGE_ADDED\020\n\022(\n$LEAGUE_AUDIT_ACTION_LEA"
      "GUE_SUBMITTED\020\013\022-\n)LEAGUE_AUDIT_ACTION_L"
      "EAGUE_SET_PRIZE_POOL\020\014\0222\n.LEAGUE_AUDIT_A"
      "CTION_LEAGUE_ADD_PRIZE_POOL_ITEM\020\r\0225\n1LE"
      "AGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_PO"
      "OL_ITEM\020\016\022*\n&LEAGUE_AUDIT_ACTION_LEAGUE_"
      "MATCH_START\020\017\022(\n$LEAGUE_AUDIT_ACTION_LEA"
      "GUE_MATCH_END\020\020\022/\n+LEAGUE_AUDIT_ACTION_L"
      "EAGUE_ADD_INVITED_TEAM\020\021\0222\n.LEAGUE_AUDIT"
      "_ACTION_LEAGUE_REMOVE_INVITED_TEAM\020\022\022-\n)"
      "LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGE"
      "D\020\023\022*\n&LEAGUE_AUDIT_ACTION_LEAGUE_STREAM"
      "_EDIT\020\024\022(\n$LEAGUE_AUDIT_ACTION_NODEGROUP"
      "_CREATE\020d\022)\n%LEAGUE_AUDIT_ACTION_NODEGRO"
      "UP_DESTROY\020e\022*\n&LEAGUE_AUDIT_ACTION_NODE"
      "GROUP_ADD_TEAM\020f\022-\n)LEAGUE_AUDIT_ACTION_"
      "NODEGROUP_REMOVE_TEAM\020g\022/\n+LEAGUE_AUDIT_"
      "ACTION_NODEGROUP_SET_ADVANCING\020h\022&\n\"LEAG"
      "UE_AUDIT_ACTION_NODEGROUP_EDIT\020i\022*\n&LEAG"
      "UE_AUDIT_ACTION_NODEGROUP_POPULATE\020j\022+\n\'"
      "LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED\020"
      "k\022$\n\037LEAGUE_AUDIT_ACTION_NODE_CREATE\020\310\001\022"
      "%\n LEAGUE_AUDIT_ACTION_NODE_DESTROY\020\311\001\022("
      "\n#LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE\020\312\001"
      "\022&\n!LEAGUE_AUDIT_ACTION_NODE_SET_TEAM\020\313\001"
      "\022+\n&LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_"
      "ID\020\314\001\022+\n&LEAGUE_AUDIT_ACTION_NODE_SET_AD"
      "VANCING\020\315\001\022&\n!LEAGUE_AUDIT_ACTION_NODE_S"
      "ET_TIME\020\316\001\022-\n(LEAGUE_AUDIT_ACTION_NODE_M"
      "ATCH_COMPLETED\020\317\001\022\'\n\"LEAGUE_AUDIT_ACTION"
      "_NODE_COMPLETED\020\320\001\022\"\n\035LEAGUE_AUDIT_ACTIO"
      "N_NODE_EDIT\020\321\001*\277\013\n\024DOTA_COMBATLOG_TYPES\022"
      "#\n\026DOTA_COMBATLOG_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\031\n\025"
      "DOTA_COMBATLOG_DAMAGE\020\000\022\027\n\023DOTA_COMBATLO"
      "G_HEAL\020\001\022\037\n\033DOTA_COMBATLOG_MODIFIER_ADD\020"
      "\002\022\"\n\036DOTA_COMBATLOG_MODIFIER_REMOVE\020\003\022\030\n"
      "\024DOTA_COMBATLOG_DEATH\020\004\022\032\n\026DOTA_COMBATLO"
      "G_ABILITY\020\005\022\027\n\023DOTA_COMBATLOG_ITEM\020\006\022\033\n\027"
      "DOTA_COMBATLOG_LOCATION\020\007\022\027\n\023DOTA_COMBAT"
      "LOG_GOLD\020\010\022\035\n\031DOTA_COMBATLOG_GAME_STATE\020"
      "\t\022\025\n\021DOTA_COMBATLOG_XP\020\n\022\033\n\027DOTA_COMBATL"
      "OG_PURCHASE\020\013\022\032\n\026DOTA_COMBATLOG_BUYBACK\020"
      "\014\022\"\n\036DOTA_COMBATLOG_ABILITY_TRIGGER\020\r\022\036\n"
      "\032DOTA_COMBATLOG_PLAYERSTATS\020\016\022\034\n\030DOTA_CO"
      "MBATLOG_MULTIKILL\020\017\022\035\n\031DOTA_COMBATLOG_KI"
      "LLSTREAK\020\020\022%\n!DOTA_COMBATLOG_TEAM_BUILDI"
      "NG_KILL\020\021\022\036\n\032DOTA_COMBATLOG_FIRST_BLOOD\020"
      "\022\022\'\n#DOTA_COMBATLOG_MODIFIER_STACK_EVENT"
      "\020\023\022%\n!DOTA_COMBATLOG_NEUTRAL_CAMP_STACK\020"
      "\024\022\036\n\032DOTA_COMBATLOG_PICKUP_RUNE\020\025\022%\n!DOT"
      "A_COMBATLOG_REVEALED_INVISIBLE\020\026\022\035\n\031DOTA"
      "_COMBATLOG_HERO_SAVED\020\027\022 \n\034DOTA_COMBATLO"
      "G_MANA_RESTORED\020\030\022\037\n\033DOTA_COMBATLOG_HERO"
      "_LEVELUP\020\031\022#\n\037DOTA_COMBATLOG_BOTTLE_HEAL"
      "_ALLY\020\032\022 \n\034DOTA_COMBATLOG_ENDGAME_STATS\020"
      "\033\022$\n DOTA_COMBATLOG_INTERRUPT_CHANNEL\020\034\022"
      "\036\n\032DOTA_COMBATLOG_ALLIED_GOLD\020\035\022\036\n\032DOTA_"
      "COMBATLOG_AEGIS_TAKEN\020\036\022\036\n\032DOTA_COMBATLO"
      "G_MANA_DAMAGE\020\037\022,\n(DOTA_COMBATLOG_PHYSIC"
      "AL_DAMAGE_PREVENTED\020 \022 \n\034DOTA_COMBATLOG_"
      "UNIT_SUMMONED\020!\022\037\n\033DOTA_COMBATLOG_ATTACK"
      "_EVADE\020\"\022\033\n\027DOTA_COMBATLOG_TREE_CUT\020#\022\"\n"
      "\036DOTA_COMBATLOG_SUCCESSFUL_SCAN\020$\022!\n\035DOT"
      "A_COMBATLOG_END_KILLSTREAK\020%\022$\n DOTA_COM"
      "BATLOG_BLOODSTONE_CHARGE\020&\022\"\n\036DOTA_COMBA"
      "TLOG_CRITICAL_DAMAGE\020\'\022\037\n\033DOTA_COMBATLOG"
      "_SPELL_ABSORB\020(\022\"\n\036DOTA_COMBATLOG_UNIT_T"
      "ELEPORTED\020)\022#\n\037DOTA_COMBATLOG_KILL_EATER"
      "_EVENT\020**u\n\020EDPCFavoriteType\022\025\n\021FAVORITE"
      "_TYPE_ALL\020\000\022\030\n\024FAVORITE_TYPE_PLAYER\020\001\022\026\n"
      "\022FAVORITE_TYPE_TEAM\020\002\022\030\n\024FAVORITE_TYPE_L"
      "EAGUE\020\003*\244\004\n\024EDPCPushNotification\022(\n$DPC_"
      "PUSH_NOTIFICATION_MATCH_STARTING\020\001\022*\n&DP"
      "C_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM\020\n\022,"
      "\n(DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TE"
      "AM\020\013\022,\n(DPC_PUSH_NOTIFICATION_TEAM_ROSTE"
      "R_CHANGE\020\024\022%\n!DPC_PUSH_NOTIFICATION_TEAM"
      "_RESULT\020\025\0226\n2DPC_PUSH_NOTIFICATION_PREDI"
      "CTION_MATCHES_AVAILABLE\020\036\0224\n0DPC_PUSH_NO"
      "TIFICATION_PREDICTION_MATCH_COMPLETED\020\037\022"
      "1\n-DPC_PUSH_NOTIFICATION_FANTASY_ROSTER_"
      "REMINDER\020(\0220\n,DPC_PUSH_NOTIFICATION_FANT"
      "ASY_PLAYER_CLEARED\020)\022/\n+DPC_PUSH_NOTIFIC"
      "ATION_FANTASY_DAILY_SUMMARY\020*\022/\n+DPC_PUS"
      "H_NOTIFICATION_FANTASY_FINAL_RESULTS\020+B\005"
      "H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 17045);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_shared_enums.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dota_5fshared_5fenums_2eproto
const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[0];
}
bool DOTA_GameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[1];
}
bool DOTA_GameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[2];
}
bool DOTA_GC_TEAM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEvent_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[3];
}
bool EEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[4];
}
bool DOTALeaverStatus_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[5];
}
bool DOTAConnectionState_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[6];
}
bool Fantasy_Roles_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[7];
}
bool Fantasy_Team_Slots_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[8];
}
bool Fantasy_Selection_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAChatChannelType_t_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[9];
}
bool DOTAChatChannelType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EProfileCardSlotType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[10];
}
bool EProfileCardSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMatchGroupServerStatus_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[11];
}
bool EMatchGroupServerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[12];
}
bool DOTA_CM_PICK_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[13];
}
bool DOTALowPriorityBanType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[14];
}
bool DOTALobbyReadyState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[15];
}
bool DOTAGameVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[16];
}
bool DOTAJoinLobbyResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTASelectionPriorityRules_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[17];
}
bool DOTASelectionPriorityRules_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTASelectionPriorityChoice_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[18];
}
bool DOTASelectionPriorityChoice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[19];
}
bool DOTAMatchVote_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[20];
}
bool DOTA_LobbyMemberXPBonus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[21];
}
bool DOTALobbyVisibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAPlayerMMRType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[22];
}
bool EDOTAPlayerMMRType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[23];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[24];
}
bool DOTABotDifficulty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_BOT_MODE_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[25];
}
bool DOTA_BOT_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[26];
}
bool MatchLanguages_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETourneyQueueDeadlineState_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[27];
}
bool ETourneyQueueDeadlineState_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMatchOutcome_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[28];
}
bool EMatchOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELaneType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[29];
}
bool ELaneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBadgeType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[30];
}
bool EBadgeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeagueStatus_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[31];
}
bool ELeagueStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeagueRegion_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[32];
}
bool ELeagueRegion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeagueTier_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[33];
}
bool ELeagueTier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeagueTierCategory_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[34];
}
bool ELeagueTierCategory_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeagueFlags_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[35];
}
bool ELeagueFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeagueBroadcastProvider_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[36];
}
bool ELeagueBroadcastProvider_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeaguePhase_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[37];
}
bool ELeaguePhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeagueFantasyPhase_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[38];
}
bool ELeagueFantasyPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeagueAuditAction_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[39];
}
bool ELeagueAuditAction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[40];
}
bool DOTA_COMBATLOG_TYPES_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDPCFavoriteType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[41];
}
bool EDPCFavoriteType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDPCPushNotification_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[42];
}
bool EDPCPushNotification_IsValid(int value) {
  switch (value) {
    case 1:
    case 10:
    case 11:
    case 20:
    case 21:
    case 30:
    case 31:
    case 40:
    case 41:
    case 42:
    case 43:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CDOTAClientHardwareSpecs::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientHardwareSpecs::kLogicalProcessorsFieldNumber;
const int CDOTAClientHardwareSpecs::kCpuCyclesPerSecondFieldNumber;
const int CDOTAClientHardwareSpecs::kTotalPhysicalMemoryFieldNumber;
const int CDOTAClientHardwareSpecs::kIs64BitOsFieldNumber;
const int CDOTAClientHardwareSpecs::kUploadMeasurementFieldNumber;
const int CDOTAClientHardwareSpecs::kPreferNotHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientHardwareSpecs::CDOTAClientHardwareSpecs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTAClientHardwareSpecs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTAClientHardwareSpecs)
}
CDOTAClientHardwareSpecs::CDOTAClientHardwareSpecs(const CDOTAClientHardwareSpecs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_cycles_per_second_, &from.cpu_cycles_per_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_measurement_) -
    reinterpret_cast<char*>(&cpu_cycles_per_second_)) + sizeof(upload_measurement_));
  // @@protoc_insertion_point(copy_constructor:CDOTAClientHardwareSpecs)
}

void CDOTAClientHardwareSpecs::SharedCtor() {
  ::memset(&cpu_cycles_per_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_measurement_) -
      reinterpret_cast<char*>(&cpu_cycles_per_second_)) + sizeof(upload_measurement_));
}

CDOTAClientHardwareSpecs::~CDOTAClientHardwareSpecs() {
  // @@protoc_insertion_point(destructor:CDOTAClientHardwareSpecs)
  SharedDtor();
}

void CDOTAClientHardwareSpecs::SharedDtor() {
}

void CDOTAClientHardwareSpecs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDOTAClientHardwareSpecs::descriptor() {
  ::protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientHardwareSpecs& CDOTAClientHardwareSpecs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTAClientHardwareSpecs.base);
  return *internal_default_instance();
}


void CDOTAClientHardwareSpecs::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAClientHardwareSpecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&cpu_cycles_per_second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&upload_measurement_) -
        reinterpret_cast<char*>(&cpu_cycles_per_second_)) + sizeof(upload_measurement_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientHardwareSpecs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTAClientHardwareSpecs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 logical_processors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_logical_processors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logical_processors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 cpu_cycles_per_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_cpu_cycles_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cpu_cycles_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 total_physical_memory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_total_physical_memory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_physical_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_64_bit_os = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_64_bit_os();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_64_bit_os_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 upload_measurement = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_upload_measurement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_measurement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prefer_not_host = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_prefer_not_host();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_not_host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTAClientHardwareSpecs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTAClientHardwareSpecs)
  return false;
#undef DO_
}

void CDOTAClientHardwareSpecs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTAClientHardwareSpecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 logical_processors = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logical_processors(), output);
  }

  // optional fixed64 cpu_cycles_per_second = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->cpu_cycles_per_second(), output);
  }

  // optional fixed64 total_physical_memory = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->total_physical_memory(), output);
  }

  // optional bool is_64_bit_os = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_64_bit_os(), output);
  }

  // optional uint64 upload_measurement = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->upload_measurement(), output);
  }

  // optional bool prefer_not_host = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->prefer_not_host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTAClientHardwareSpecs)
}

::google::protobuf::uint8* CDOTAClientHardwareSpecs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAClientHardwareSpecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 logical_processors = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logical_processors(), target);
  }

  // optional fixed64 cpu_cycles_per_second = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->cpu_cycles_per_second(), target);
  }

  // optional fixed64 total_physical_memory = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->total_physical_memory(), target);
  }

  // optional bool is_64_bit_os = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_64_bit_os(), target);
  }

  // optional uint64 upload_measurement = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->upload_measurement(), target);
  }

  // optional bool prefer_not_host = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->prefer_not_host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAClientHardwareSpecs)
  return target;
}

size_t CDOTAClientHardwareSpecs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAClientHardwareSpecs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional fixed64 cpu_cycles_per_second = 2;
    if (has_cpu_cycles_per_second()) {
      total_size += 1 + 8;
    }

    // optional fixed64 total_physical_memory = 3;
    if (has_total_physical_memory()) {
      total_size += 1 + 8;
    }

    // optional uint32 logical_processors = 1;
    if (has_logical_processors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logical_processors());
    }

    // optional bool is_64_bit_os = 4;
    if (has_is_64_bit_os()) {
      total_size += 1 + 1;
    }

    // optional bool prefer_not_host = 6;
    if (has_prefer_not_host()) {
      total_size += 1 + 1;
    }

    // optional uint64 upload_measurement = 5;
    if (has_upload_measurement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_measurement());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAClientHardwareSpecs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAClientHardwareSpecs)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientHardwareSpecs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientHardwareSpecs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAClientHardwareSpecs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAClientHardwareSpecs)
    MergeFrom(*source);
  }
}

void CDOTAClientHardwareSpecs::MergeFrom(const CDOTAClientHardwareSpecs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAClientHardwareSpecs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      cpu_cycles_per_second_ = from.cpu_cycles_per_second_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_physical_memory_ = from.total_physical_memory_;
    }
    if (cached_has_bits & 0x00000004u) {
      logical_processors_ = from.logical_processors_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_64_bit_os_ = from.is_64_bit_os_;
    }
    if (cached_has_bits & 0x00000010u) {
      prefer_not_host_ = from.prefer_not_host_;
    }
    if (cached_has_bits & 0x00000020u) {
      upload_measurement_ = from.upload_measurement_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientHardwareSpecs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAClientHardwareSpecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientHardwareSpecs::CopyFrom(const CDOTAClientHardwareSpecs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAClientHardwareSpecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientHardwareSpecs::IsInitialized() const {
  return true;
}

void CDOTAClientHardwareSpecs::Swap(CDOTAClientHardwareSpecs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientHardwareSpecs::InternalSwap(CDOTAClientHardwareSpecs* other) {
  using std::swap;
  swap(cpu_cycles_per_second_, other->cpu_cycles_per_second_);
  swap(total_physical_memory_, other->total_physical_memory_);
  swap(logical_processors_, other->logical_processors_);
  swap(is_64_bit_os_, other->is_64_bit_os_);
  swap(prefer_not_host_, other->prefer_not_host_);
  swap(upload_measurement_, other->upload_measurement_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDOTAClientHardwareSpecs::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDOTASaveGame_Player::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTASaveGame_Player::kTeamFieldNumber;
const int CDOTASaveGame_Player::kNameFieldNumber;
const int CDOTASaveGame_Player::kHeroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTASaveGame_Player::CDOTASaveGame_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame_Player.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame.Player)
}
CDOTASaveGame_Player::CDOTASaveGame_Player(const CDOTASaveGame_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  hero_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero()) {
    hero_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_);
  }
  team_ = from.team_;
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame.Player)
}

void CDOTASaveGame_Player::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0;
}

CDOTASaveGame_Player::~CDOTASaveGame_Player() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame.Player)
  SharedDtor();
}

void CDOTASaveGame_Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTASaveGame_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDOTASaveGame_Player::descriptor() {
  ::protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTASaveGame_Player& CDOTASaveGame_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame_Player.base);
  return *internal_default_instance();
}


void CDOTASaveGame_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTASaveGame.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      hero_.ClearNonDefaultToEmptyNoArena();
    }
  }
  team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTASaveGame_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDOTASaveGame.Player.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero().data(), static_cast<int>(this->hero().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDOTASaveGame.Player.hero");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame.Player)
  return false;
#undef DO_
}

void CDOTASaveGame_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTASaveGame.Player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string hero = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero().data(), static_cast<int>(this->hero().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTASaveGame.Player.hero");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hero(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame.Player)
}

::google::protobuf::uint8* CDOTASaveGame_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTASaveGame.Player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string hero = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero().data(), static_cast<int>(this->hero().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDOTASaveGame.Player.hero");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame.Player)
  return target;
}

size_t CDOTASaveGame_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTASaveGame.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero());
    }

    // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTASaveGame_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTASaveGame.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASaveGame_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTASaveGame.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTASaveGame.Player)
    MergeFrom(*source);
  }
}

void CDOTASaveGame_Player::MergeFrom(const CDOTASaveGame_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTASaveGame.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hero();
      hero_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_);
    }
    if (cached_has_bits & 0x00000004u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASaveGame_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTASaveGame.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_Player::CopyFrom(const CDOTASaveGame_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTASaveGame.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_Player::IsInitialized() const {
  return true;
}

void CDOTASaveGame_Player::Swap(CDOTASaveGame_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame_Player::InternalSwap(CDOTASaveGame_Player* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hero_.Swap(&other->hero_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_, other->team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDOTASaveGame_Player::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDOTASaveGame_SaveInstance_PlayerPositions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTASaveGame_SaveInstance_PlayerPositions::kXFieldNumber;
const int CDOTASaveGame_SaveInstance_PlayerPositions::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame_SaveInstance_PlayerPositions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame.SaveInstance.PlayerPositions)
}
CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions(const CDOTASaveGame_SaveInstance_PlayerPositions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame.SaveInstance.PlayerPositions)
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

CDOTASaveGame_SaveInstance_PlayerPositions::~CDOTASaveGame_SaveInstance_PlayerPositions() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame.SaveInstance.PlayerPositions)
  SharedDtor();
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedDtor() {
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_PlayerPositions::descriptor() {
  ::protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance_PlayerPositions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame_SaveInstance_PlayerPositions.base);
  return *internal_default_instance();
}


void CDOTASaveGame_SaveInstance_PlayerPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame.SaveInstance.PlayerPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame.SaveInstance.PlayerPositions)
  return false;
#undef DO_
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame.SaveInstance.PlayerPositions)
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance_PlayerPositions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame.SaveInstance.PlayerPositions)
  return target;
}

size_t CDOTASaveGame_SaveInstance_PlayerPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASaveGame_SaveInstance_PlayerPositions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame_SaveInstance_PlayerPositions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTASaveGame.SaveInstance.PlayerPositions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTASaveGame.SaveInstance.PlayerPositions)
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTASaveGame.SaveInstance.PlayerPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::IsInitialized() const {
  return true;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::Swap(CDOTASaveGame_SaveInstance_PlayerPositions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame_SaveInstance_PlayerPositions::InternalSwap(CDOTASaveGame_SaveInstance_PlayerPositions* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance_PlayerPositions::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDOTASaveGame_SaveInstance::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTASaveGame_SaveInstance::kGameTimeFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam1ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam2ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kPlayerPositionsFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveIdFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame_SaveInstance.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame.SaveInstance)
}
CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance(const CDOTASaveGame_SaveInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      player_positions_(from.player_positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&save_time_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(save_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame.SaveInstance)
}

void CDOTASaveGame_SaveInstance::SharedCtor() {
  ::memset(&game_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&save_time_) -
      reinterpret_cast<char*>(&game_time_)) + sizeof(save_time_));
}

CDOTASaveGame_SaveInstance::~CDOTASaveGame_SaveInstance() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame.SaveInstance)
  SharedDtor();
}

void CDOTASaveGame_SaveInstance::SharedDtor() {
}

void CDOTASaveGame_SaveInstance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance::descriptor() {
  ::protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTASaveGame_SaveInstance& CDOTASaveGame_SaveInstance::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame_SaveInstance.base);
  return *internal_default_instance();
}


void CDOTASaveGame_SaveInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTASaveGame.SaveInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_positions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&save_time_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(save_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTASaveGame_SaveInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame.SaveInstance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_team1_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_team2_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_player_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 save_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_save_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 save_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_save_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame.SaveInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame.SaveInstance)
  return false;
#undef DO_
}

void CDOTASaveGame_SaveInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame.SaveInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_time(), output);
  }

  // optional uint32 team1_score = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team1_score(), output);
  }

  // optional uint32 team2_score = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team2_score(), output);
  }

  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_positions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->player_positions(static_cast<int>(i)),
      output);
  }

  // optional uint32 save_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->save_id(), output);
  }

  // optional uint32 save_time = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->save_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame.SaveInstance)
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame.SaveInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_time(), target);
  }

  // optional uint32 team1_score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team1_score(), target);
  }

  // optional uint32 team2_score = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team2_score(), target);
  }

  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_positions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->player_positions(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 save_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->save_id(), target);
  }

  // optional uint32 save_time = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->save_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame.SaveInstance)
  return target;
}

size_t CDOTASaveGame_SaveInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTASaveGame.SaveInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->player_positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->player_positions(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 game_time = 2;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

    // optional uint32 team1_score = 3;
    if (has_team1_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_score());
    }

    // optional uint32 team2_score = 4;
    if (has_team2_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_score());
    }

    // optional uint32 save_id = 6;
    if (has_save_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_id());
    }

    // optional uint32 save_time = 7;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTASaveGame_SaveInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTASaveGame.SaveInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASaveGame_SaveInstance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame_SaveInstance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTASaveGame.SaveInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTASaveGame.SaveInstance)
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance::MergeFrom(const CDOTASaveGame_SaveInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTASaveGame.SaveInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_positions_.MergeFrom(from.player_positions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      team1_score_ = from.team1_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      team2_score_ = from.team2_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      save_id_ = from.save_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      save_time_ = from.save_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASaveGame_SaveInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTASaveGame.SaveInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance::CopyFrom(const CDOTASaveGame_SaveInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTASaveGame.SaveInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance::IsInitialized() const {
  return true;
}

void CDOTASaveGame_SaveInstance::Swap(CDOTASaveGame_SaveInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame_SaveInstance::InternalSwap(CDOTASaveGame_SaveInstance* other) {
  using std::swap;
  CastToBase(&player_positions_)->InternalSwap(CastToBase(&other->player_positions_));
  swap(game_time_, other->game_time_);
  swap(team1_score_, other->team1_score_);
  swap(team2_score_, other->team2_score_);
  swap(save_id_, other->save_id_);
  swap(save_time_, other->save_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CDOTASaveGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTASaveGame::kMatchIdFieldNumber;
const int CDOTASaveGame::kSaveTimeFieldNumber;
const int CDOTASaveGame::kPlayersFieldNumber;
const int CDOTASaveGame::kSaveInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTASaveGame::CDOTASaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDOTASaveGame)
}
CDOTASaveGame::CDOTASaveGame(const CDOTASaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      save_instances_(from.save_instances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&save_time_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(save_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTASaveGame)
}

void CDOTASaveGame::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&save_time_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(save_time_));
}

CDOTASaveGame::~CDOTASaveGame() {
  // @@protoc_insertion_point(destructor:CDOTASaveGame)
  SharedDtor();
}

void CDOTASaveGame::SharedDtor() {
}

void CDOTASaveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CDOTASaveGame::descriptor() {
  ::protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTASaveGame& CDOTASaveGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dota_5fshared_5fenums_2eproto::scc_info_CDOTASaveGame.base);
  return *internal_default_instance();
}


void CDOTASaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTASaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  save_instances_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&save_time_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(save_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTASaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDOTASaveGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 save_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_save_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CDOTASaveGame.Player players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_save_instances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDOTASaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDOTASaveGame)
  return false;
#undef DO_
}

void CDOTASaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDOTASaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 save_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->save_time(), output);
  }

  // repeated .CDOTASaveGame.Player players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->players(static_cast<int>(i)),
      output);
  }

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->save_instances_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->save_instances(static_cast<int>(i)),
      output);
  }

  // optional uint64 match_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDOTASaveGame)
}

::google::protobuf::uint8* CDOTASaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CDOTASaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 save_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->save_time(), target);
  }

  // repeated .CDOTASaveGame.Player players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->players(static_cast<int>(i)), deterministic, target);
  }

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->save_instances_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->save_instances(static_cast<int>(i)), deterministic, target);
  }

  // optional uint64 match_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTASaveGame)
  return target;
}

size_t CDOTASaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTASaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CDOTASaveGame.Player players = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  // repeated .CDOTASaveGame.SaveInstance save_instances = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->save_instances_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->save_instances(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 5;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 save_time = 2;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTASaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTASaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASaveGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTASaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTASaveGame)
    MergeFrom(*source);
  }
}

void CDOTASaveGame::MergeFrom(const CDOTASaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTASaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  save_instances_.MergeFrom(from.save_instances_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      save_time_ = from.save_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTASaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame::CopyFrom(const CDOTASaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTASaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame::IsInitialized() const {
  return true;
}

void CDOTASaveGame::Swap(CDOTASaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame::InternalSwap(CDOTASaveGame* other) {
  using std::swap;
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  CastToBase(&save_instances_)->InternalSwap(CastToBase(&other->save_instances_));
  swap(match_id_, other->match_id_);
  swap(save_time_, other->save_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CDOTASaveGame::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTACombatLogEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACombatLogEntry::kTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetNameFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetSourceNameFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerNameFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageSourceNameFieldNumber;
const int CMsgDOTACombatLogEntry::kInflictorNameFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAttackerIllusionFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAttackerHeroFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetIllusionFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetHeroFieldNumber;
const int CMsgDOTACombatLogEntry::kIsVisibleRadiantFieldNumber;
const int CMsgDOTACombatLogEntry::kIsVisibleDireFieldNumber;
const int CMsgDOTACombatLogEntry::kValueFieldNumber;
const int CMsgDOTACombatLogEntry::kHealthFieldNumber;
const int CMsgDOTACombatLogEntry::kTimestampFieldNumber;
const int CMsgDOTACombatLogEntry::kStunDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kSlowDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAbilityToggleOnFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAbilityToggleOffFieldNumber;
const int CMsgDOTACombatLogEntry::kAbilityLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kLocationXFieldNumber;
const int CMsgDOTACombatLogEntry::kLocationYFieldNumber;
const int CMsgDOTACombatLogEntry::kGoldReasonFieldNumber;
const int CMsgDOTACombatLogEntry::kTimestampRawFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kXpReasonFieldNumber;
const int CMsgDOTACombatLogEntry::kLastHitsFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerTeamFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetTeamFieldNumber;
const int CMsgDOTACombatLogEntry::kObsWardsPlacedFieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer0FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer1FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer2FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer3FieldNumber;
const int CMsgDOTACombatLogEntry::kStackCountFieldNumber;
const int CMsgDOTACombatLogEntry::kHiddenModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetBuildingFieldNumber;
const int CMsgDOTACombatLogEntry::kNeutralCampTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kRuneTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayersFieldNumber;
const int CMsgDOTACombatLogEntry::kIsHealSaveFieldNumber;
const int CMsgDOTACombatLogEntry::kIsUltimateAbilityFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerHeroLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetHeroLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kXpmFieldNumber;
const int CMsgDOTACombatLogEntry::kGpmFieldNumber;
const int CMsgDOTACombatLogEntry::kEventLocationFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetIsSelfFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kInvisibilityModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageCategoryFieldNumber;
const int CMsgDOTACombatLogEntry::kNetworthFieldNumber;
const int CMsgDOTACombatLogEntry::kBuildingTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierElapsedDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kSilenceModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kHealFromLifestealFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierPurgedFieldNumber;
const int CMsgDOTACombatLogEntry::kSpellEvadedFieldNumber;
const int CMsgDOTACombatLogEntry::kMotionControllerModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kLongRangeKillFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierPurgeAbilityFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierPurgeNpcFieldNumber;
const int CMsgDOTACombatLogEntry::kRootModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kTotalUnitDeathCountFieldNumber;
const int CMsgDOTACombatLogEntry::kAuraModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kArmorDebuffModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kNoPhysicalDamageModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierAbilityFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierHiddenFieldNumber;
const int CMsgDOTACombatLogEntry::kInflictorIsStolenAbilityFieldNumber;
const int CMsgDOTACombatLogEntry::kKillEaterEventFieldNumber;
const int CMsgDOTACombatLogEntry::kUnitStatusLabelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACombatLogEntry::CMsgDOTACombatLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dota_5fshared_5fenums_2eproto::scc_info_CMsgDOTACombatLogEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgDOTACombatLogEntry)
}
CMsgDOTACombatLogEntry::CMsgDOTACombatLogEntry(const CMsgDOTACombatLogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      assist_players_(from.assist_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_name_, &from.target_name_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&target_name_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACombatLogEntry)
}

void CMsgDOTACombatLogEntry::SharedCtor() {
  ::memset(&target_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_status_label_) -
      reinterpret_cast<char*>(&target_name_)) + sizeof(unit_status_label_));
  type_ = -1;
}

CMsgDOTACombatLogEntry::~CMsgDOTACombatLogEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTACombatLogEntry)
  SharedDtor();
}

void CMsgDOTACombatLogEntry::SharedDtor() {
}

void CMsgDOTACombatLogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CMsgDOTACombatLogEntry::descriptor() {
  ::protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTACombatLogEntry& CMsgDOTACombatLogEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dota_5fshared_5fenums_2eproto::scc_info_CMsgDOTACombatLogEntry.base);
  return *internal_default_instance();
}


void CMsgDOTACombatLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTACombatLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assist_players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&target_name_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_target_illusion_) -
        reinterpret_cast<char*>(&target_name_)) + sizeof(is_target_illusion_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&is_target_hero_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_ability_toggle_off_) -
        reinterpret_cast<char*>(&is_target_hero_)) + sizeof(is_ability_toggle_off_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&stun_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&modifier_duration_) -
        reinterpret_cast<char*>(&stun_duration_)) + sizeof(modifier_duration_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&xp_reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assist_player2_) -
        reinterpret_cast<char*>(&xp_reason_)) + sizeof(assist_player2_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&assist_player3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_ultimate_ability_) -
        reinterpret_cast<char*>(&assist_player3_)) + sizeof(is_ultimate_ability_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&attacker_hero_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&networth_) -
        reinterpret_cast<char*>(&attacker_hero_level_)) + sizeof(networth_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&target_is_self_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spell_evaded_) -
        reinterpret_cast<char*>(&target_is_self_)) + sizeof(spell_evaded_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&motion_controller_modifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&armor_debuff_modifier_) -
        reinterpret_cast<char*>(&motion_controller_modifier_)) + sizeof(armor_debuff_modifier_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 127u) {
    ::memset(&no_physical_damage_modifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unit_status_label_) -
        reinterpret_cast<char*>(&no_physical_damage_modifier_)) + sizeof(unit_status_label_));
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTACombatLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgDOTACombatLogEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DOTA_COMBATLOG_TYPES_IsValid(value)) {
            set_type(static_cast< ::DOTA_COMBATLOG_TYPES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_source_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_target_source_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_source_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attacker_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_attacker_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_source_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_damage_source_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_source_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inflictor_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_inflictor_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inflictor_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_attacker_illusion = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_is_attacker_illusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_illusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_attacker_hero = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_is_attacker_hero();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_hero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_target_illusion = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_is_target_illusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_illusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_target_hero = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_is_target_hero();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_hero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_visible_radiant = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_visible_radiant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_visible_dire = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_is_visible_dire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 health = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float timestamp = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stun_duration = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_stun_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stun_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float slow_duration = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_slow_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slow_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ability_toggle_on = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_is_ability_toggle_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ability_toggle_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ability_toggle_off = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_is_ability_toggle_off();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ability_toggle_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_level = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_ability_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float location_x = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_location_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float location_y = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_location_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_reason = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_gold_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float timestamp_raw = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u /* 197 & 0xFF */)) {
          set_has_timestamp_raw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float modifier_duration = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u /* 205 & 0xFF */)) {
          set_has_modifier_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modifier_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_reason = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_xp_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attacker_team = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_attacker_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_team = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_target_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 obs_wards_placed = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_obs_wards_placed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obs_wards_placed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assist_player0 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_assist_player0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assist_player1 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_assist_player1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assist_player2 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_assist_player2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assist_player3 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 272 & 0xFF */)) {
          set_has_assist_player3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stack_count = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 280 & 0xFF */)) {
          set_has_stack_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hidden_modifier = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 288 & 0xFF */)) {
          set_has_hidden_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_target_building = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {
          set_has_is_target_building();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_building_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 neutral_camp_type = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 304 & 0xFF */)) {
          set_has_neutral_camp_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neutral_camp_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rune_type = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 312 & 0xFF */)) {
          set_has_rune_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rune_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 assist_players = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 320 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 320u, input, this->mutable_assist_players())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 322 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_assist_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_heal_save = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_is_heal_save();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_heal_save_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ultimate_ability = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_is_ultimate_ability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ultimate_ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attacker_hero_level = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_attacker_hero_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_hero_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_hero_level = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_target_hero_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_hero_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xpm = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_xpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gpm = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_gpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_location = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_event_location();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool target_is_self = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_target_is_self();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_is_self_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_type = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_damage_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool invisibility_modifier = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_invisibility_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invisibility_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_category = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_damage_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 networth = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_networth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &networth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 building_type = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_building_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float modifier_elapsed_duration = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 437 & 0xFF */)) {
          set_has_modifier_elapsed_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modifier_elapsed_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool silence_modifier = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 440 & 0xFF */)) {
          set_has_silence_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silence_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool heal_from_lifesteal = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 448 & 0xFF */)) {
          set_has_heal_from_lifesteal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &heal_from_lifesteal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool modifier_purged = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 456 & 0xFF */)) {
          set_has_modifier_purged();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &modifier_purged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool spell_evaded = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 464 & 0xFF */)) {
          set_has_spell_evaded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spell_evaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool motion_controller_modifier = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 472 & 0xFF */)) {
          set_has_motion_controller_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motion_controller_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool long_range_kill = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 480 & 0xFF */)) {
          set_has_long_range_kill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &long_range_kill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifier_purge_ability = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_modifier_purge_ability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifier_purge_ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifier_purge_npc = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_modifier_purge_npc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifier_purge_npc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool root_modifier = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          set_has_root_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &root_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_unit_death_count = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          set_has_total_unit_death_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_unit_death_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aura_modifier = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
          set_has_aura_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aura_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool armor_debuff_modifier = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {
          set_has_armor_debuff_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &armor_debuff_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_physical_damage_modifier = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 536 & 0xFF */)) {
          set_has_no_physical_damage_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_physical_damage_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifier_ability = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 544 & 0xFF */)) {
          set_has_modifier_ability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifier_ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool modifier_hidden = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 552 & 0xFF */)) {
          set_has_modifier_hidden();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &modifier_hidden_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool inflictor_is_stolen_ability = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 560 & 0xFF */)) {
          set_has_inflictor_is_stolen_ability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inflictor_is_stolen_ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kill_eater_event = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 568 & 0xFF */)) {
          set_has_kill_eater_event();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_eater_event_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unit_status_label = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 576 & 0xFF */)) {
          set_has_unit_status_label();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_status_label_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgDOTACombatLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgDOTACombatLogEntry)
  return false;
#undef DO_
}

void CMsgDOTACombatLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgDOTACombatLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[2];
  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_name(), output);
  }

  // optional uint32 target_source_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_source_name(), output);
  }

  // optional uint32 attacker_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attacker_name(), output);
  }

  // optional uint32 damage_source_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->damage_source_name(), output);
  }

  // optional uint32 inflictor_name = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->inflictor_name(), output);
  }

  // optional bool is_attacker_illusion = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_attacker_illusion(), output);
  }

  // optional bool is_attacker_hero = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_attacker_hero(), output);
  }

  // optional bool is_target_illusion = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_target_illusion(), output);
  }

  // optional bool is_target_hero = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_target_hero(), output);
  }

  // optional bool is_visible_radiant = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_visible_radiant(), output);
  }

  // optional bool is_visible_dire = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_visible_dire(), output);
  }

  // optional uint32 value = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->value(), output);
  }

  // optional int32 health = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->health(), output);
  }

  // optional float timestamp = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->timestamp(), output);
  }

  // optional float stun_duration = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->stun_duration(), output);
  }

  // optional float slow_duration = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->slow_duration(), output);
  }

  // optional bool is_ability_toggle_on = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_ability_toggle_on(), output);
  }

  // optional bool is_ability_toggle_off = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_ability_toggle_off(), output);
  }

  // optional uint32 ability_level = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->ability_level(), output);
  }

  // optional float location_x = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->location_x(), output);
  }

  // optional float location_y = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->location_y(), output);
  }

  // optional uint32 gold_reason = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gold_reason(), output);
  }

  // optional float timestamp_raw = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->timestamp_raw(), output);
  }

  // optional float modifier_duration = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->modifier_duration(), output);
  }

  // optional uint32 xp_reason = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->xp_reason(), output);
  }

  // optional uint32 last_hits = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->last_hits(), output);
  }

  // optional uint32 attacker_team = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->attacker_team(), output);
  }

  // optional uint32 target_team = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->target_team(), output);
  }

  // optional uint32 obs_wards_placed = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->obs_wards_placed(), output);
  }

  // optional uint32 assist_player0 = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->assist_player0(), output);
  }

  // optional uint32 assist_player1 = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->assist_player1(), output);
  }

  // optional uint32 assist_player2 = 33;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->assist_player2(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 assist_player3 = 34;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->assist_player3(), output);
  }

  // optional uint32 stack_count = 35;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->stack_count(), output);
  }

  // optional bool hidden_modifier = 36;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->hidden_modifier(), output);
  }

  // optional bool is_target_building = 37;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->is_target_building(), output);
  }

  // optional uint32 neutral_camp_type = 38;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->neutral_camp_type(), output);
  }

  // optional uint32 rune_type = 39;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->rune_type(), output);
  }

  // repeated uint32 assist_players = 40;
  for (int i = 0, n = this->assist_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      40, this->assist_players(i), output);
  }

  // optional bool is_heal_save = 41;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->is_heal_save(), output);
  }

  // optional bool is_ultimate_ability = 42;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->is_ultimate_ability(), output);
  }

  // optional uint32 attacker_hero_level = 43;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->attacker_hero_level(), output);
  }

  // optional uint32 target_hero_level = 44;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->target_hero_level(), output);
  }

  // optional uint32 xpm = 45;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->xpm(), output);
  }

  // optional uint32 gpm = 46;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->gpm(), output);
  }

  // optional uint32 event_location = 47;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->event_location(), output);
  }

  // optional bool target_is_self = 48;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->target_is_self(), output);
  }

  // optional uint32 damage_type = 49;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->damage_type(), output);
  }

  // optional bool invisibility_modifier = 50;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->invisibility_modifier(), output);
  }

  // optional uint32 damage_category = 51;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->damage_category(), output);
  }

  // optional uint32 networth = 52;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->networth(), output);
  }

  // optional uint32 building_type = 53;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->building_type(), output);
  }

  // optional float modifier_elapsed_duration = 54;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->modifier_elapsed_duration(), output);
  }

  // optional bool silence_modifier = 55;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->silence_modifier(), output);
  }

  // optional bool heal_from_lifesteal = 56;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->heal_from_lifesteal(), output);
  }

  // optional bool modifier_purged = 57;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->modifier_purged(), output);
  }

  // optional bool spell_evaded = 58;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->spell_evaded(), output);
  }

  // optional bool motion_controller_modifier = 59;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->motion_controller_modifier(), output);
  }

  // optional bool long_range_kill = 60;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->long_range_kill(), output);
  }

  // optional uint32 modifier_purge_ability = 61;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->modifier_purge_ability(), output);
  }

  // optional uint32 modifier_purge_npc = 62;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->modifier_purge_npc(), output);
  }

  // optional bool root_modifier = 63;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->root_modifier(), output);
  }

  // optional uint32 total_unit_death_count = 64;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->total_unit_death_count(), output);
  }

  // optional bool aura_modifier = 65;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->aura_modifier(), output);
  }

  // optional bool armor_debuff_modifier = 66;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->armor_debuff_modifier(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool no_physical_damage_modifier = 67;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->no_physical_damage_modifier(), output);
  }

  // optional uint32 modifier_ability = 68;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->modifier_ability(), output);
  }

  // optional bool modifier_hidden = 69;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->modifier_hidden(), output);
  }

  // optional bool inflictor_is_stolen_ability = 70;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->inflictor_is_stolen_ability(), output);
  }

  // optional uint32 kill_eater_event = 71;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->kill_eater_event(), output);
  }

  // optional uint32 unit_status_label = 72;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->unit_status_label(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgDOTACombatLogEntry)
}

::google::protobuf::uint8* CMsgDOTACombatLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACombatLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[2];
  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_name(), target);
  }

  // optional uint32 target_source_name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_source_name(), target);
  }

  // optional uint32 attacker_name = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attacker_name(), target);
  }

  // optional uint32 damage_source_name = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->damage_source_name(), target);
  }

  // optional uint32 inflictor_name = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->inflictor_name(), target);
  }

  // optional bool is_attacker_illusion = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_attacker_illusion(), target);
  }

  // optional bool is_attacker_hero = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_attacker_hero(), target);
  }

  // optional bool is_target_illusion = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_target_illusion(), target);
  }

  // optional bool is_target_hero = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_target_hero(), target);
  }

  // optional bool is_visible_radiant = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_visible_radiant(), target);
  }

  // optional bool is_visible_dire = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_visible_dire(), target);
  }

  // optional uint32 value = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->value(), target);
  }

  // optional int32 health = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->health(), target);
  }

  // optional float timestamp = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->timestamp(), target);
  }

  // optional float stun_duration = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->stun_duration(), target);
  }

  // optional float slow_duration = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->slow_duration(), target);
  }

  // optional bool is_ability_toggle_on = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_ability_toggle_on(), target);
  }

  // optional bool is_ability_toggle_off = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_ability_toggle_off(), target);
  }

  // optional uint32 ability_level = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->ability_level(), target);
  }

  // optional float location_x = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->location_x(), target);
  }

  // optional float location_y = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->location_y(), target);
  }

  // optional uint32 gold_reason = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gold_reason(), target);
  }

  // optional float timestamp_raw = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->timestamp_raw(), target);
  }

  // optional float modifier_duration = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->modifier_duration(), target);
  }

  // optional uint32 xp_reason = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->xp_reason(), target);
  }

  // optional uint32 last_hits = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->last_hits(), target);
  }

  // optional uint32 attacker_team = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->attacker_team(), target);
  }

  // optional uint32 target_team = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->target_team(), target);
  }

  // optional uint32 obs_wards_placed = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->obs_wards_placed(), target);
  }

  // optional uint32 assist_player0 = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->assist_player0(), target);
  }

  // optional uint32 assist_player1 = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->assist_player1(), target);
  }

  // optional uint32 assist_player2 = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->assist_player2(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 assist_player3 = 34;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->assist_player3(), target);
  }

  // optional uint32 stack_count = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->stack_count(), target);
  }

  // optional bool hidden_modifier = 36;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->hidden_modifier(), target);
  }

  // optional bool is_target_building = 37;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->is_target_building(), target);
  }

  // optional uint32 neutral_camp_type = 38;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->neutral_camp_type(), target);
  }

  // optional uint32 rune_type = 39;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->rune_type(), target);
  }

  // repeated uint32 assist_players = 40;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(40, this->assist_players_, target);

  // optional bool is_heal_save = 41;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->is_heal_save(), target);
  }

  // optional bool is_ultimate_ability = 42;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->is_ultimate_ability(), target);
  }

  // optional uint32 attacker_hero_level = 43;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->attacker_hero_level(), target);
  }

  // optional uint32 target_hero_level = 44;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->target_hero_level(), target);
  }

  // optional uint32 xpm = 45;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->xpm(), target);
  }

  // optional uint32 gpm = 46;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->gpm(), target);
  }

  // optional uint32 event_location = 47;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->event_location(), target);
  }

  // optional bool target_is_self = 48;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->target_is_self(), target);
  }

  // optional uint32 damage_type = 49;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->damage_type(), target);
  }

  // optional bool invisibility_modifier = 50;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->invisibility_modifier(), target);
  }

  // optional uint32 damage_category = 51;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->damage_category(), target);
  }

  // optional uint32 networth = 52;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->networth(), target);
  }

  // optional uint32 building_type = 53;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->building_type(), target);
  }

  // optional float modifier_elapsed_duration = 54;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->modifier_elapsed_duration(), target);
  }

  // optional bool silence_modifier = 55;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->silence_modifier(), target);
  }

  // optional bool heal_from_lifesteal = 56;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->heal_from_lifesteal(), target);
  }

  // optional bool modifier_purged = 57;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->modifier_purged(), target);
  }

  // optional bool spell_evaded = 58;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->spell_evaded(), target);
  }

  // optional bool motion_controller_modifier = 59;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->motion_controller_modifier(), target);
  }

  // optional bool long_range_kill = 60;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->long_range_kill(), target);
  }

  // optional uint32 modifier_purge_ability = 61;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->modifier_purge_ability(), target);
  }

  // optional uint32 modifier_purge_npc = 62;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->modifier_purge_npc(), target);
  }

  // optional bool root_modifier = 63;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->root_modifier(), target);
  }

  // optional uint32 total_unit_death_count = 64;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->total_unit_death_count(), target);
  }

  // optional bool aura_modifier = 65;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->aura_modifier(), target);
  }

  // optional bool armor_debuff_modifier = 66;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->armor_debuff_modifier(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool no_physical_damage_modifier = 67;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->no_physical_damage_modifier(), target);
  }

  // optional uint32 modifier_ability = 68;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->modifier_ability(), target);
  }

  // optional bool modifier_hidden = 69;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(69, this->modifier_hidden(), target);
  }

  // optional bool inflictor_is_stolen_ability = 70;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->inflictor_is_stolen_ability(), target);
  }

  // optional uint32 kill_eater_event = 71;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->kill_eater_event(), target);
  }

  // optional uint32 unit_status_label = 72;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->unit_status_label(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACombatLogEntry)
  return target;
}

size_t CMsgDOTACombatLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTACombatLogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 assist_players = 40;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->assist_players_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->assist_players_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 target_name = 2;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_name());
    }

    // optional uint32 target_source_name = 3;
    if (has_target_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_source_name());
    }

    // optional uint32 attacker_name = 4;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_name());
    }

    // optional uint32 damage_source_name = 5;
    if (has_damage_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_source_name());
    }

    // optional uint32 inflictor_name = 6;
    if (has_inflictor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inflictor_name());
    }

    // optional bool is_attacker_illusion = 7;
    if (has_is_attacker_illusion()) {
      total_size += 1 + 1;
    }

    // optional bool is_attacker_hero = 8;
    if (has_is_attacker_hero()) {
      total_size += 1 + 1;
    }

    // optional bool is_target_illusion = 9;
    if (has_is_target_illusion()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_target_hero = 10;
    if (has_is_target_hero()) {
      total_size += 1 + 1;
    }

    // optional uint32 value = 13;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional int32 health = 14;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional float timestamp = 15;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional bool is_visible_radiant = 11;
    if (has_is_visible_radiant()) {
      total_size += 1 + 1;
    }

    // optional bool is_visible_dire = 12;
    if (has_is_visible_dire()) {
      total_size += 1 + 1;
    }

    // optional bool is_ability_toggle_on = 18;
    if (has_is_ability_toggle_on()) {
      total_size += 2 + 1;
    }

    // optional bool is_ability_toggle_off = 19;
    if (has_is_ability_toggle_off()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float stun_duration = 16;
    if (has_stun_duration()) {
      total_size += 2 + 4;
    }

    // optional float slow_duration = 17;
    if (has_slow_duration()) {
      total_size += 2 + 4;
    }

    // optional uint32 ability_level = 20;
    if (has_ability_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_level());
    }

    // optional float location_x = 21;
    if (has_location_x()) {
      total_size += 2 + 4;
    }

    // optional float location_y = 22;
    if (has_location_y()) {
      total_size += 2 + 4;
    }

    // optional uint32 gold_reason = 23;
    if (has_gold_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_reason());
    }

    // optional float timestamp_raw = 24;
    if (has_timestamp_raw()) {
      total_size += 2 + 4;
    }

    // optional float modifier_duration = 25;
    if (has_modifier_duration()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 xp_reason = 26;
    if (has_xp_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_reason());
    }

    // optional uint32 last_hits = 27;
    if (has_last_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 attacker_team = 28;
    if (has_attacker_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_team());
    }

    // optional uint32 target_team = 29;
    if (has_target_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_team());
    }

    // optional uint32 obs_wards_placed = 30;
    if (has_obs_wards_placed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obs_wards_placed());
    }

    // optional uint32 assist_player0 = 31;
    if (has_assist_player0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player0());
    }

    // optional uint32 assist_player1 = 32;
    if (has_assist_player1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player1());
    }

    // optional uint32 assist_player2 = 33;
    if (has_assist_player2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player2());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 assist_player3 = 34;
    if (has_assist_player3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player3());
    }

    // optional uint32 stack_count = 35;
    if (has_stack_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

    // optional uint32 neutral_camp_type = 38;
    if (has_neutral_camp_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neutral_camp_type());
    }

    // optional uint32 rune_type = 39;
    if (has_rune_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rune_type());
    }

    // optional bool hidden_modifier = 36;
    if (has_hidden_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool is_target_building = 37;
    if (has_is_target_building()) {
      total_size += 2 + 1;
    }

    // optional bool is_heal_save = 41;
    if (has_is_heal_save()) {
      total_size += 2 + 1;
    }

    // optional bool is_ultimate_ability = 42;
    if (has_is_ultimate_ability()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional uint32 attacker_hero_level = 43;
    if (has_attacker_hero_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_hero_level());
    }

    // optional uint32 target_hero_level = 44;
    if (has_target_hero_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_hero_level());
    }

    // optional uint32 xpm = 45;
    if (has_xpm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 gpm = 46;
    if (has_gpm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 event_location = 47;
    if (has_event_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_location());
    }

    // optional uint32 damage_type = 49;
    if (has_damage_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_type());
    }

    // optional uint32 damage_category = 51;
    if (has_damage_category()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_category());
    }

    // optional uint32 networth = 52;
    if (has_networth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->networth());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional bool target_is_self = 48;
    if (has_target_is_self()) {
      total_size += 2 + 1;
    }

    // optional bool invisibility_modifier = 50;
    if (has_invisibility_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool silence_modifier = 55;
    if (has_silence_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool heal_from_lifesteal = 56;
    if (has_heal_from_lifesteal()) {
      total_size += 2 + 1;
    }

    // optional uint32 building_type = 53;
    if (has_building_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_type());
    }

    // optional float modifier_elapsed_duration = 54;
    if (has_modifier_elapsed_duration()) {
      total_size += 2 + 4;
    }

    // optional bool modifier_purged = 57;
    if (has_modifier_purged()) {
      total_size += 2 + 1;
    }

    // optional bool spell_evaded = 58;
    if (has_spell_evaded()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional bool motion_controller_modifier = 59;
    if (has_motion_controller_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool long_range_kill = 60;
    if (has_long_range_kill()) {
      total_size += 2 + 1;
    }

    // optional uint32 modifier_purge_ability = 61;
    if (has_modifier_purge_ability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifier_purge_ability());
    }

    // optional uint32 modifier_purge_npc = 62;
    if (has_modifier_purge_npc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifier_purge_npc());
    }

    // optional uint32 total_unit_death_count = 64;
    if (has_total_unit_death_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_unit_death_count());
    }

    // optional bool root_modifier = 63;
    if (has_root_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool aura_modifier = 65;
    if (has_aura_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool armor_debuff_modifier = 66;
    if (has_armor_debuff_modifier()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[64 / 32] & 127u) {
    // optional bool no_physical_damage_modifier = 67;
    if (has_no_physical_damage_modifier()) {
      total_size += 2 + 1;
    }

    // optional uint32 modifier_ability = 68;
    if (has_modifier_ability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifier_ability());
    }

    // optional bool modifier_hidden = 69;
    if (has_modifier_hidden()) {
      total_size += 2 + 1;
    }

    // optional bool inflictor_is_stolen_ability = 70;
    if (has_inflictor_is_stolen_ability()) {
      total_size += 2 + 1;
    }

    // optional uint32 kill_eater_event = 71;
    if (has_kill_eater_event()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_eater_event());
    }

    // optional uint32 unit_status_label = 72;
    if (has_unit_status_label()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_status_label());
    }

    // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACombatLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTACombatLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACombatLogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACombatLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTACombatLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTACombatLogEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTACombatLogEntry::MergeFrom(const CMsgDOTACombatLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTACombatLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assist_players_.MergeFrom(from.assist_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      target_name_ = from.target_name_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_source_name_ = from.target_source_name_;
    }
    if (cached_has_bits & 0x00000004u) {
      attacker_name_ = from.attacker_name_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_source_name_ = from.damage_source_name_;
    }
    if (cached_has_bits & 0x00000010u) {
      inflictor_name_ = from.inflictor_name_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_attacker_illusion_ = from.is_attacker_illusion_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_attacker_hero_ = from.is_attacker_hero_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_target_illusion_ = from.is_target_illusion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      is_target_hero_ = from.is_target_hero_;
    }
    if (cached_has_bits & 0x00000200u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000400u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00000800u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_visible_radiant_ = from.is_visible_radiant_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_visible_dire_ = from.is_visible_dire_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_ability_toggle_on_ = from.is_ability_toggle_on_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_ability_toggle_off_ = from.is_ability_toggle_off_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      stun_duration_ = from.stun_duration_;
    }
    if (cached_has_bits & 0x00020000u) {
      slow_duration_ = from.slow_duration_;
    }
    if (cached_has_bits & 0x00040000u) {
      ability_level_ = from.ability_level_;
    }
    if (cached_has_bits & 0x00080000u) {
      location_x_ = from.location_x_;
    }
    if (cached_has_bits & 0x00100000u) {
      location_y_ = from.location_y_;
    }
    if (cached_has_bits & 0x00200000u) {
      gold_reason_ = from.gold_reason_;
    }
    if (cached_has_bits & 0x00400000u) {
      timestamp_raw_ = from.timestamp_raw_;
    }
    if (cached_has_bits & 0x00800000u) {
      modifier_duration_ = from.modifier_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      xp_reason_ = from.xp_reason_;
    }
    if (cached_has_bits & 0x02000000u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x04000000u) {
      attacker_team_ = from.attacker_team_;
    }
    if (cached_has_bits & 0x08000000u) {
      target_team_ = from.target_team_;
    }
    if (cached_has_bits & 0x10000000u) {
      obs_wards_placed_ = from.obs_wards_placed_;
    }
    if (cached_has_bits & 0x20000000u) {
      assist_player0_ = from.assist_player0_;
    }
    if (cached_has_bits & 0x40000000u) {
      assist_player1_ = from.assist_player1_;
    }
    if (cached_has_bits & 0x80000000u) {
      assist_player2_ = from.assist_player2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      assist_player3_ = from.assist_player3_;
    }
    if (cached_has_bits & 0x00000002u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      neutral_camp_type_ = from.neutral_camp_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rune_type_ = from.rune_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      hidden_modifier_ = from.hidden_modifier_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_target_building_ = from.is_target_building_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_heal_save_ = from.is_heal_save_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_ultimate_ability_ = from.is_ultimate_ability_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      attacker_hero_level_ = from.attacker_hero_level_;
    }
    if (cached_has_bits & 0x00000200u) {
      target_hero_level_ = from.target_hero_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      xpm_ = from.xpm_;
    }
    if (cached_has_bits & 0x00000800u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00001000u) {
      event_location_ = from.event_location_;
    }
    if (cached_has_bits & 0x00002000u) {
      damage_type_ = from.damage_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      damage_category_ = from.damage_category_;
    }
    if (cached_has_bits & 0x00008000u) {
      networth_ = from.networth_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      target_is_self_ = from.target_is_self_;
    }
    if (cached_has_bits & 0x00020000u) {
      invisibility_modifier_ = from.invisibility_modifier_;
    }
    if (cached_has_bits & 0x00040000u) {
      silence_modifier_ = from.silence_modifier_;
    }
    if (cached_has_bits & 0x00080000u) {
      heal_from_lifesteal_ = from.heal_from_lifesteal_;
    }
    if (cached_has_bits & 0x00100000u) {
      building_type_ = from.building_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      modifier_elapsed_duration_ = from.modifier_elapsed_duration_;
    }
    if (cached_has_bits & 0x00400000u) {
      modifier_purged_ = from.modifier_purged_;
    }
    if (cached_has_bits & 0x00800000u) {
      spell_evaded_ = from.spell_evaded_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      motion_controller_modifier_ = from.motion_controller_modifier_;
    }
    if (cached_has_bits & 0x02000000u) {
      long_range_kill_ = from.long_range_kill_;
    }
    if (cached_has_bits & 0x04000000u) {
      modifier_purge_ability_ = from.modifier_purge_ability_;
    }
    if (cached_has_bits & 0x08000000u) {
      modifier_purge_npc_ = from.modifier_purge_npc_;
    }
    if (cached_has_bits & 0x10000000u) {
      total_unit_death_count_ = from.total_unit_death_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      root_modifier_ = from.root_modifier_;
    }
    if (cached_has_bits & 0x40000000u) {
      aura_modifier_ = from.aura_modifier_;
    }
    if (cached_has_bits & 0x80000000u) {
      armor_debuff_modifier_ = from.armor_debuff_modifier_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      no_physical_damage_modifier_ = from.no_physical_damage_modifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      modifier_ability_ = from.modifier_ability_;
    }
    if (cached_has_bits & 0x00000004u) {
      modifier_hidden_ = from.modifier_hidden_;
    }
    if (cached_has_bits & 0x00000008u) {
      inflictor_is_stolen_ability_ = from.inflictor_is_stolen_ability_;
    }
    if (cached_has_bits & 0x00000010u) {
      kill_eater_event_ = from.kill_eater_event_;
    }
    if (cached_has_bits & 0x00000020u) {
      unit_status_label_ = from.unit_status_label_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CMsgDOTACombatLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTACombatLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACombatLogEntry::CopyFrom(const CMsgDOTACombatLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTACombatLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACombatLogEntry::IsInitialized() const {
  return true;
}

void CMsgDOTACombatLogEntry::Swap(CMsgDOTACombatLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACombatLogEntry::InternalSwap(CMsgDOTACombatLogEntry* other) {
  using std::swap;
  assist_players_.InternalSwap(&other->assist_players_);
  swap(target_name_, other->target_name_);
  swap(target_source_name_, other->target_source_name_);
  swap(attacker_name_, other->attacker_name_);
  swap(damage_source_name_, other->damage_source_name_);
  swap(inflictor_name_, other->inflictor_name_);
  swap(is_attacker_illusion_, other->is_attacker_illusion_);
  swap(is_attacker_hero_, other->is_attacker_hero_);
  swap(is_target_illusion_, other->is_target_illusion_);
  swap(is_target_hero_, other->is_target_hero_);
  swap(value_, other->value_);
  swap(health_, other->health_);
  swap(timestamp_, other->timestamp_);
  swap(is_visible_radiant_, other->is_visible_radiant_);
  swap(is_visible_dire_, other->is_visible_dire_);
  swap(is_ability_toggle_on_, other->is_ability_toggle_on_);
  swap(is_ability_toggle_off_, other->is_ability_toggle_off_);
  swap(stun_duration_, other->stun_duration_);
  swap(slow_duration_, other->slow_duration_);
  swap(ability_level_, other->ability_level_);
  swap(location_x_, other->location_x_);
  swap(location_y_, other->location_y_);
  swap(gold_reason_, other->gold_reason_);
  swap(timestamp_raw_, other->timestamp_raw_);
  swap(modifier_duration_, other->modifier_duration_);
  swap(xp_reason_, other->xp_reason_);
  swap(last_hits_, other->last_hits_);
  swap(attacker_team_, other->attacker_team_);
  swap(target_team_, other->target_team_);
  swap(obs_wards_placed_, other->obs_wards_placed_);
  swap(assist_player0_, other->assist_player0_);
  swap(assist_player1_, other->assist_player1_);
  swap(assist_player2_, other->assist_player2_);
  swap(assist_player3_, other->assist_player3_);
  swap(stack_count_, other->stack_count_);
  swap(neutral_camp_type_, other->neutral_camp_type_);
  swap(rune_type_, other->rune_type_);
  swap(hidden_modifier_, other->hidden_modifier_);
  swap(is_target_building_, other->is_target_building_);
  swap(is_heal_save_, other->is_heal_save_);
  swap(is_ultimate_ability_, other->is_ultimate_ability_);
  swap(attacker_hero_level_, other->attacker_hero_level_);
  swap(target_hero_level_, other->target_hero_level_);
  swap(xpm_, other->xpm_);
  swap(gpm_, other->gpm_);
  swap(event_location_, other->event_location_);
  swap(damage_type_, other->damage_type_);
  swap(damage_category_, other->damage_category_);
  swap(networth_, other->networth_);
  swap(target_is_self_, other->target_is_self_);
  swap(invisibility_modifier_, other->invisibility_modifier_);
  swap(silence_modifier_, other->silence_modifier_);
  swap(heal_from_lifesteal_, other->heal_from_lifesteal_);
  swap(building_type_, other->building_type_);
  swap(modifier_elapsed_duration_, other->modifier_elapsed_duration_);
  swap(modifier_purged_, other->modifier_purged_);
  swap(spell_evaded_, other->spell_evaded_);
  swap(motion_controller_modifier_, other->motion_controller_modifier_);
  swap(long_range_kill_, other->long_range_kill_);
  swap(modifier_purge_ability_, other->modifier_purge_ability_);
  swap(modifier_purge_npc_, other->modifier_purge_npc_);
  swap(total_unit_death_count_, other->total_unit_death_count_);
  swap(root_modifier_, other->root_modifier_);
  swap(aura_modifier_, other->aura_modifier_);
  swap(armor_debuff_modifier_, other->armor_debuff_modifier_);
  swap(no_physical_damage_modifier_, other->no_physical_damage_modifier_);
  swap(modifier_ability_, other->modifier_ability_);
  swap(modifier_hidden_, other->modifier_hidden_);
  swap(inflictor_is_stolen_ability_, other->inflictor_is_stolen_ability_);
  swap(kill_eater_event_, other->kill_eater_event_);
  swap(unit_status_label_, other->unit_status_label_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CMsgDOTACombatLogEntry::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDOTAClientHardwareSpecs* Arena::CreateMaybeMessage< ::CDOTAClientHardwareSpecs >(Arena* arena) {
  return Arena::CreateInternal< ::CDOTAClientHardwareSpecs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDOTASaveGame_Player* Arena::CreateMaybeMessage< ::CDOTASaveGame_Player >(Arena* arena) {
  return Arena::CreateInternal< ::CDOTASaveGame_Player >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDOTASaveGame_SaveInstance_PlayerPositions* Arena::CreateMaybeMessage< ::CDOTASaveGame_SaveInstance_PlayerPositions >(Arena* arena) {
  return Arena::CreateInternal< ::CDOTASaveGame_SaveInstance_PlayerPositions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDOTASaveGame_SaveInstance* Arena::CreateMaybeMessage< ::CDOTASaveGame_SaveInstance >(Arena* arena) {
  return Arena::CreateInternal< ::CDOTASaveGame_SaveInstance >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CDOTASaveGame* Arena::CreateMaybeMessage< ::CDOTASaveGame >(Arena* arena) {
  return Arena::CreateInternal< ::CDOTASaveGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::CMsgDOTACombatLogEntry* Arena::CreateMaybeMessage< ::CMsgDOTACombatLogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgDOTACombatLogEntry >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
